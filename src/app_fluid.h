// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef app_fluid_h
#define app_fluid_h
# include "gsim/fl_viewer.h"
# include "app_events.h"
# include "app_viewer.h"
# include "time_slider.h"
#include "app_graph_viewer.h"
#include "app_nla_viewer.h"
#include "app_foot_viewer.h"
#include <fltk/Window.h>
#include <fltk/TiledGroup.h>
#include <fltk/Group.h>
#include <fltk/MenuBar.h>
#include <fltk/Item.h>
#include <fltk/ItemGroup.h>
#include <fltk/Divider.h>
#include <fltk/TabGroup.h>
#include <fltk/Button.h>
#include <fltk/ValueSlider.h>
#include <fltk/ValueInput.h>
#include <fltk/Choice.h>
#include <fltk/CheckButton.h>
#include <fltk/InvisibleBox.h>
#include <fltk/Browser.h>
#include <fltk/RadioButton.h>
#include <fltk/ValueOutput.h>
#include <fltk/LightButton.h>
#include <fltk/MultiBrowser.h>
#include <fltk/TextDisplay.h>

class AppFluid  {
public:
  virtual void event ( AppEvent e )=0;
  AppFluid();
  fltk::Window *ui_window;
        fltk::Group *ui_message;
        AppViewer *ui_viewer;
      fltk::Group *ui_main_group;
private:
          inline void cb_X_i(fltk::Item*, void*);
          static void cb_X(fltk::Item*, void*);
          inline void cb_draw_i(fltk::ItemGroup*, void*);
          static void cb_draw(fltk::ItemGroup*, void*);
            inline void cb_parmeters_i(fltk::Item*, void*);
            static void cb_parmeters(fltk::Item*, void*);
            inline void cb_save_i(fltk::Item*, void*);
            static void cb_save(fltk::Item*, void*);
            inline void cb_load_i(fltk::Item*, void*);
            static void cb_load(fltk::Item*, void*);
            inline void cb_save1_i(fltk::Item*, void*);
            static void cb_save1(fltk::Item*, void*);
            inline void cb_Graph_i(fltk::Item*, void*);
            static void cb_Graph(fltk::Item*, void*);
            inline void cb_Track_i(fltk::Item*, void*);
            static void cb_Track(fltk::Item*, void*);
            inline void cb_timeline_i(fltk::Item*, void*);
            static void cb_timeline(fltk::Item*, void*);
            inline void cb_load1_i(fltk::Item*, void*);
            static void cb_load1(fltk::Item*, void*);
            inline void cb_draw1_i(fltk::Item*, void*);
            static void cb_draw1(fltk::Item*, void*);
            inline void cb_set_i(fltk::Item*, void*);
            static void cb_set(fltk::Item*, void*);
            inline void cb_set1_i(fltk::Item*, void*);
            static void cb_set1(fltk::Item*, void*);
            inline void cb_bake_i(fltk::Item*, void*);
            static void cb_bake(fltk::Item*, void*);
            inline void cb_make_i(fltk::Item*, void*);
            static void cb_make(fltk::Item*, void*);
            inline void cb_clear_i(fltk::Item*, void*);
            static void cb_clear(fltk::Item*, void*);
            inline void cb_start_i(fltk::Item*, void*);
            static void cb_start(fltk::Item*, void*);
            inline void cb_reset_i(fltk::Item*, void*);
            static void cb_reset(fltk::Item*, void*);
            inline void cb_send_i(fltk::Item*, void*);
            static void cb_send(fltk::Item*, void*);
            inline void cb_get_i(fltk::Item*, void*);
            static void cb_get(fltk::Item*, void*);
            inline void cb_send1_i(fltk::Item*, void*);
            static void cb_send1(fltk::Item*, void*);
            inline void cb_vicon_i(fltk::Item*, void*);
            static void cb_vicon(fltk::Item*, void*);
public:
          fltk::TabGroup *ui_main_tab;
private:
              inline void cb_run_i(fltk::Button*, void*);
              static void cb_run(fltk::Button*, void*);
              inline void cb_reset1_i(fltk::Button*, void*);
              static void cb_reset1(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_sikStiffness;
private:
              inline void cb_ui_sikStiffness_i(fltk::ValueSlider*, void*);
              static void cb_ui_sikStiffness(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_sikDamp;
private:
              inline void cb_ui_sikDamp_i(fltk::ValueSlider*, void*);
              static void cb_ui_sikDamp(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_sikGrav;
private:
              inline void cb_ui_sikGrav_i(fltk::ValueSlider*, void*);
              static void cb_ui_sikGrav(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_sikStepSize;
private:
              inline void cb_ui_sikStepSize_i(fltk::ValueSlider*, void*);
              static void cb_ui_sikStepSize(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_sikHandStiffness;
private:
              inline void cb_ui_sikHandStiffness_i(fltk::ValueSlider*, void*);
              static void cb_ui_sikHandStiffness(fltk::ValueSlider*, void*);
              inline void cb_evaluate_i(fltk::Button*, void*);
              static void cb_evaluate(fltk::Button*, void*);
public:
              fltk::ValueInput *ui_dEnd;
private:
              inline void cb_run1_i(fltk::Button*, void*);
              static void cb_run1(fltk::Button*, void*);
              inline void cb_reset2_i(fltk::Button*, void*);
              static void cb_reset2(fltk::Button*, void*);
public:
              fltk::ValueInput *ui_tol;
              fltk::Choice *ui_solveMethod;
              fltk::CheckButton *ui_debug;
              fltk::ValueSlider *ui_dampC;
              fltk::CheckButton *ui_col;
              fltk::ValueInput *ui_obsRep;
              fltk::ValueSlider *ui_falloff;
              fltk::ValueSlider *ui_maxV;
              fltk::CheckButton *ui_stopSolve;
              fltk::ValueInput *ui_JtransVel;
              fltk::CheckButton *ui_hipsJacobian;
private:
              inline void cb_ui_JacHips_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips(fltk::CheckButton*, void*);
              inline void cb_ui_JacHips1_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips1(fltk::CheckButton*, void*);
              inline void cb_ui_JacHips2_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips2(fltk::CheckButton*, void*);
              inline void cb_ui_JacHips3_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips3(fltk::CheckButton*, void*);
              inline void cb_ui_JacHips4_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips4(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_JacHips[6];
private:
              inline void cb_ui_JacHips5_i(fltk::CheckButton*, void*);
              static void cb_ui_JacHips5(fltk::CheckButton*, void*);
public:
              fltk::Browser *ui_keylist;
private:
              inline void cb_ui_keylist_i(fltk::Browser*, void*);
              static void cb_ui_keylist(fltk::Browser*, void*);
              inline void cb_Reset_i(fltk::Button*, void*);
              static void cb_Reset(fltk::Button*, void*);
public:
                fltk::RadioButton *ui_ikrot;
private:
              inline void cb_create_i(fltk::Button*, void*);
              static void cb_create(fltk::Button*, void*);
public:
              fltk::CheckButton *ui_visgeo;
private:
              inline void cb_ui_visgeo_i(fltk::CheckButton*, void*);
              static void cb_ui_visgeo(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_skeleton;
              fltk::CheckButton *ui_part_com;
              fltk::CheckButton *ui_com;
              fltk::CheckButton *ui_support;
              fltk::CheckButton *ui_test_collisions;
              fltk::CheckButton *ui_jointaxis;
private:
              inline void cb_ui_jointaxis_i(fltk::CheckButton*, void*);
              static void cb_ui_jointaxis(fltk::CheckButton*, void*);
              inline void cb_Land_i(fltk::Button*, void*);
              static void cb_Land(fltk::Button*, void*);
              inline void cb_ui_IK_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK(fltk::ValueSlider*, void*);
              inline void cb_ui_IK1_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK1(fltk::ValueSlider*, void*);
              inline void cb_ui_IK2_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK2(fltk::ValueSlider*, void*);
              inline void cb_ui_IK3_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK3(fltk::ValueSlider*, void*);
              inline void cb_ui_IK4_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK4(fltk::ValueSlider*, void*);
              inline void cb_ui_IK5_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK5(fltk::ValueSlider*, void*);
              inline void cb_ui_IK6_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK6(fltk::ValueSlider*, void*);
              inline void cb_ui_IK7_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK7(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_IK[9];
private:
              inline void cb_ui_IK8_i(fltk::ValueSlider*, void*);
              static void cb_ui_IK8(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_arm_ik_active;
private:
              inline void cb_ui_arm_ik_active_i(fltk::CheckButton*, void*);
              static void cb_ui_arm_ik_active(fltk::CheckButton*, void*);
public:
              fltk::ValueSlider *ui_cont_stepDistance;
private:
              inline void cb_ui_cont_stepDistance_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_stepDistance(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_cont_stepHeight;
private:
              inline void cb_ui_cont_stepHeight_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_stepHeight(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_cont_stepVelocity;
private:
              inline void cb_ui_cont_stepVelocity_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_stepVelocity(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_cont_time;
private:
              inline void cb_ui_cont_time_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_time(fltk::ValueSlider*, void*);
              inline void cb_start1_i(fltk::Button*, void*);
              static void cb_start1(fltk::Button*, void*);
public:
              fltk::Choice *ui_cont_state;
              fltk::ValueSlider *ui_cont_hipHeight;
private:
              inline void cb_ui_cont_hipHeight_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_hipHeight(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_cont_hipDist;
private:
              inline void cb_ui_cont_hipDist_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_hipDist(fltk::ValueSlider*, void*);
              inline void cb_stop_i(fltk::Button*, void*);
              static void cb_stop(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_cont_fps;
private:
              inline void cb_ui_cont_fps_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_fps(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_cont_res;
private:
              inline void cb_ui_cont_res_i(fltk::ValueSlider*, void*);
              static void cb_ui_cont_res(fltk::ValueSlider*, void*);
public:
              fltk::ValueOutput *ui_renc[21];
              fltk::ValueOutput *ui_sense[14];
              fltk::ValueOutput *ui_enc[28];
              fltk::CheckButton *ui_actValues;
private:
              inline void cb_ui_actValues_i(fltk::CheckButton*, void*);
              static void cb_ui_actValues(fltk::CheckButton*, void*);
              inline void cb_play_i(fltk::Button*, void*);
              static void cb_play(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_turnAdjustAng;
private:
              inline void cb_ui_turnAdjustAng_i(fltk::ValueSlider*, void*);
              static void cb_ui_turnAdjustAng(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_stepHeight;
private:
              inline void cb_ui_stepHeight_i(fltk::ValueSlider*, void*);
              static void cb_ui_stepHeight(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_stepDistance;
private:
              inline void cb_ui_stepDistance_i(fltk::ValueSlider*, void*);
              static void cb_ui_stepDistance(fltk::ValueSlider*, void*);
public:
              fltk::ValueOutput *ui_numSteps;
private:
              inline void cb_ui_numSteps_i(fltk::ValueOutput*, void*);
              static void cb_ui_numSteps(fltk::ValueOutput*, void*);
              inline void cb_fwd_i(fltk::Button*, void*);
              static void cb_fwd(fltk::Button*, void*);
              inline void cb_rev_i(fltk::Button*, void*);
              static void cb_rev(fltk::Button*, void*);
              inline void cb_left_i(fltk::Button*, void*);
              static void cb_left(fltk::Button*, void*);
              inline void cb_right_i(fltk::Button*, void*);
              static void cb_right(fltk::Button*, void*);
              inline void cb_up_i(fltk::Button*, void*);
              static void cb_up(fltk::Button*, void*);
              inline void cb_down_i(fltk::Button*, void*);
              static void cb_down(fltk::Button*, void*);
public:
              fltk::ValueInput *ui_hipAmount;
              fltk::ValueInput *ui_numStepInterp;
private:
              inline void cb_ui_numStepInterp_i(fltk::ValueInput*, void*);
              static void cb_ui_numStepInterp(fltk::ValueInput*, void*);
public:
              fltk::ValueInput *ui_StepFPS;
              fltk::CheckButton *ui_showRoot;
private:
              inline void cb_ui_showRoot_i(fltk::CheckButton*, void*);
              static void cb_ui_showRoot(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_playIncr;
private:
              inline void cb_reset3_i(fltk::Button*, void*);
              static void cb_reset3(fltk::Button*, void*);
              inline void cb_add_i(fltk::Button*, void*);
              static void cb_add(fltk::Button*, void*);
              inline void cb_Flatten_i(fltk::Button*, void*);
              static void cb_Flatten(fltk::Button*, void*);
              inline void cb_Search_i(fltk::Button*, void*);
              static void cb_Search(fltk::Button*, void*);
public:
              fltk::CheckButton *ui_moveRoot;
private:
              inline void cb_ui_moveRoot_i(fltk::CheckButton*, void*);
              static void cb_ui_moveRoot(fltk::CheckButton*, void*);
              inline void cb_Export_i(fltk::Button*, void*);
              static void cb_Export(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_channelRad;
private:
              inline void cb_ui_channelRad_i(fltk::ValueSlider*, void*);
              static void cb_ui_channelRad(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_pathRad;
private:
              inline void cb_ui_pathRad_i(fltk::ValueSlider*, void*);
              static void cb_ui_pathRad(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_pathdangle;
private:
              inline void cb_ui_pathdangle_i(fltk::ValueSlider*, void*);
              static void cb_ui_pathdangle(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_showTri;
private:
              inline void cb_ui_showTri_i(fltk::CheckButton*, void*);
              static void cb_ui_showTri(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_showConst;
private:
              inline void cb_ui_showConst_i(fltk::CheckButton*, void*);
              static void cb_ui_showConst(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_showFloorPoly;
private:
              inline void cb_ui_showFloorPoly_i(fltk::CheckButton*, void*);
              static void cb_ui_showFloorPoly(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_showPath;
private:
              inline void cb_ui_showPath_i(fltk::CheckButton*, void*);
              static void cb_ui_showPath(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_showChannel;
private:
              inline void cb_ui_showChannel_i(fltk::CheckButton*, void*);
              static void cb_ui_showChannel(fltk::CheckButton*, void*);
public:
              fltk::ValueSlider *ui_turnAdjustDist;
private:
              inline void cb_ui_turnAdjustDist_i(fltk::ValueSlider*, void*);
              static void cb_ui_turnAdjustDist(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_autoStart;
              fltk::CheckButton *ui_floorBoundingBox;
private:
              inline void cb_ui_floorBoundingBox_i(fltk::CheckButton*, void*);
              static void cb_ui_floorBoundingBox(fltk::CheckButton*, void*);
              inline void cb_pause_i(fltk::Button*, void*);
              static void cb_pause(fltk::Button*, void*);
public:
              fltk::ValueInput *ui_rtCycleTime;
              fltk::ValueSlider *ui_hipsHeight;
private:
              inline void cb_ui_hipsHeight_i(fltk::ValueSlider*, void*);
              static void cb_ui_hipsHeight(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_drawTraj;
              fltk::ValueSlider *ui_legBaseAngle;
private:
              inline void cb_ui_legBaseAngle_i(fltk::ValueSlider*, void*);
              static void cb_ui_legBaseAngle(fltk::ValueSlider*, void*);
public:
              fltk::Choice *ui_adjustState;
              fltk::CheckButton *ui_motorReply;
              fltk::CheckButton *ui_realtime;
private:
              inline void cb_ui_realtime_i(fltk::CheckButton*, void*);
              static void cb_ui_realtime(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_stream;
private:
              inline void cb_ui_stream_i(fltk::CheckButton*, void*);
              static void cb_ui_stream(fltk::CheckButton*, void*);
public:
              fltk::Browser *ui_objectList;
private:
              inline void cb_ui_objectList_i(fltk::Browser*, void*);
              static void cb_ui_objectList(fltk::Browser*, void*);
public:
              fltk::Choice *ui_objects;
private:
              inline void cb_add1_i(fltk::Button*, void*);
              static void cb_add1(fltk::Button*, void*);
              inline void cb_delete_i(fltk::Button*, void*);
              static void cb_delete(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_objX;
private:
              inline void cb_ui_objX_i(fltk::ValueSlider*, void*);
              static void cb_ui_objX(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_objY;
private:
              inline void cb_ui_objY_i(fltk::ValueSlider*, void*);
              static void cb_ui_objY(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_objZ;
private:
              inline void cb_ui_objZ_i(fltk::ValueSlider*, void*);
              static void cb_ui_objZ(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_objrX;
private:
              inline void cb_ui_objrX_i(fltk::ValueSlider*, void*);
              static void cb_ui_objrX(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_objrY;
private:
              inline void cb_ui_objrY_i(fltk::ValueSlider*, void*);
              static void cb_ui_objrY(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_objrZ;
private:
              inline void cb_ui_objrZ_i(fltk::ValueSlider*, void*);
              static void cb_ui_objrZ(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_showScene;
private:
              inline void cb_ui_showScene_i(fltk::CheckButton*, void*);
              static void cb_ui_showScene(fltk::CheckButton*, void*);
              inline void cb_ui_Ang_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang1_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang1(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang2_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang2(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang3_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang3(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang4_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang4(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang5_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang5(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang6_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang6(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang7_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang7(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang8_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang8(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang9_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang9(fltk::ValueSlider*, void*);
              inline void cb_ui_Anga_i(fltk::ValueSlider*, void*);
              static void cb_ui_Anga(fltk::ValueSlider*, void*);
              inline void cb_ui_Angb_i(fltk::ValueSlider*, void*);
              static void cb_ui_Angb(fltk::ValueSlider*, void*);
              inline void cb_ui_Angc_i(fltk::ValueSlider*, void*);
              static void cb_ui_Angc(fltk::ValueSlider*, void*);
              inline void cb_ui_Angd_i(fltk::ValueSlider*, void*);
              static void cb_ui_Angd(fltk::ValueSlider*, void*);
              inline void cb_ui_Ange_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ange(fltk::ValueSlider*, void*);
              inline void cb_ui_Angf_i(fltk::ValueSlider*, void*);
              static void cb_ui_Angf(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang10_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang10(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang11_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang11(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang12_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang12(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang13_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang13(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang14_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang14(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang15_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang15(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang16_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang16(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang17_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang17(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang18_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang18(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang19_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang19(fltk::ValueSlider*, void*);
              inline void cb_ui_Ang1a_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang1a(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_Ang[28];
private:
              inline void cb_ui_Ang1b_i(fltk::ValueSlider*, void*);
              static void cb_ui_Ang1b(fltk::ValueSlider*, void*);
              inline void cb_Zero_i(fltk::Button*, void*);
              static void cb_Zero(fltk::Button*, void*);
public:
              fltk::ValueInput *ui_intstep;
private:
              inline void cb_ui_intstep_i(fltk::ValueInput*, void*);
              static void cb_ui_intstep(fltk::ValueInput*, void*);
              inline void cb_send2_i(fltk::Button*, void*);
              static void cb_send2(fltk::Button*, void*);
              inline void cb_ui_E_i(fltk::LightButton*, void*);
              static void cb_ui_E(fltk::LightButton*, void*);
              inline void cb_ui_E1_i(fltk::LightButton*, void*);
              static void cb_ui_E1(fltk::LightButton*, void*);
              inline void cb_ui_E2_i(fltk::LightButton*, void*);
              static void cb_ui_E2(fltk::LightButton*, void*);
              inline void cb_ui_E3_i(fltk::LightButton*, void*);
              static void cb_ui_E3(fltk::LightButton*, void*);
              inline void cb_ui_E4_i(fltk::LightButton*, void*);
              static void cb_ui_E4(fltk::LightButton*, void*);
              inline void cb_ui_E5_i(fltk::LightButton*, void*);
              static void cb_ui_E5(fltk::LightButton*, void*);
              inline void cb_ui_E6_i(fltk::LightButton*, void*);
              static void cb_ui_E6(fltk::LightButton*, void*);
              inline void cb_ui_E7_i(fltk::LightButton*, void*);
              static void cb_ui_E7(fltk::LightButton*, void*);
public:
              fltk::LightButton *ui_E[10];
private:
              inline void cb_ui_E8_i(fltk::LightButton*, void*);
              static void cb_ui_E8(fltk::LightButton*, void*);
              inline void cb_ui_E9_i(fltk::LightButton*, void*);
              static void cb_ui_E9(fltk::LightButton*, void*);
              inline void cb_create1_i(fltk::Button*, void*);
              static void cb_create1(fltk::Button*, void*);
              inline void cb_reset4_i(fltk::Button*, void*);
              static void cb_reset4(fltk::Button*, void*);
              inline void cb_land_i(fltk::Button*, void*);
              static void cb_land(fltk::Button*, void*);
public:
              fltk::ValueSlider *ui_wipeRadius;
private:
              inline void cb_ui_wipeRadius_i(fltk::ValueSlider*, void*);
              static void cb_ui_wipeRadius(fltk::ValueSlider*, void*);
              inline void cb_wipe_i(fltk::Button*, void*);
              static void cb_wipe(fltk::Button*, void*);
              inline void cb_make1_i(fltk::Button*, void*);
              static void cb_make1(fltk::Button*, void*);
public:
  fltk::Window *ui_graph_window;
    AppGraphViewer *ui_graph_win;
      fltk::MultiBrowser *ui_channelList;
private:
      inline void cb_ui_channelList_i(fltk::MultiBrowser*, void*);
      static void cb_ui_channelList(fltk::MultiBrowser*, void*);
      inline void cb_load2_i(fltk::Button*, void*);
      static void cb_load2(fltk::Button*, void*);
public:
      fltk::CheckButton *ui_channelRX;
private:
      inline void cb_ui_channelRX_i(fltk::CheckButton*, void*);
      static void cb_ui_channelRX(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_channelRY;
private:
      inline void cb_ui_channelRY_i(fltk::CheckButton*, void*);
      static void cb_ui_channelRY(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_channelRZ;
private:
      inline void cb_ui_channelRZ_i(fltk::CheckButton*, void*);
      static void cb_ui_channelRZ(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_channelPX;
private:
      inline void cb_ui_channelPX_i(fltk::CheckButton*, void*);
      static void cb_ui_channelPX(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_channelPY;
private:
      inline void cb_ui_channelPY_i(fltk::CheckButton*, void*);
      static void cb_ui_channelPY(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_channelPZ;
private:
      inline void cb_ui_channelPZ_i(fltk::CheckButton*, void*);
      static void cb_ui_channelPZ(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_ikChannel;
private:
      inline void cb_free_i(fltk::Button*, void*);
      static void cb_free(fltk::Button*, void*);
      inline void cb_make2_i(fltk::Button*, void*);
      static void cb_make2(fltk::Button*, void*);
      inline void cb_new_i(fltk::Button*, void*);
      static void cb_new(fltk::Button*, void*);
public:
      fltk::Choice *ui_keyGroups;
private:
      inline void cb_ui_keyGroups_i(fltk::Choice*, void*);
      static void cb_ui_keyGroups(fltk::Choice*, void*);
public:
      fltk::Choice *ui_TrackList;
private:
      inline void cb_ui_TrackList_i(fltk::Choice*, void*);
      static void cb_ui_TrackList(fltk::Choice*, void*);
public:
    fltk::TextDisplay *ui_currentTrack;
  fltk::Window *ui_nla_window;
    AppNLAEditor *ui_nla_win;
      fltk::MultiBrowser *ui_TrackListNla;
private:
      inline void cb_ui_TrackListNla_i(fltk::MultiBrowser*, void*);
      static void cb_ui_TrackListNla(fltk::MultiBrowser*, void*);
      inline void cb_insert_i(fltk::Button*, void*);
      static void cb_insert(fltk::Button*, void*);
      inline void cb_load3_i(fltk::Button*, void*);
      static void cb_load3(fltk::Button*, void*);
public:
  fltk::Window *ui_foot_window;
    AppFootViewer *ui_foot_win;
private:
      inline void cb_Foot_i(fltk::Button*, void*);
      static void cb_Foot(fltk::Button*, void*);
public:
  fltk::Window *ui_timeline_window;
      TimeSlider *time_slider;
      fltk::ValueInput *ui_startFrame;
private:
      inline void cb_ui_startFrame_i(fltk::ValueInput*, void*);
      static void cb_ui_startFrame(fltk::ValueInput*, void*);
public:
      fltk::ValueInput *ui_endFrame;
private:
      inline void cb_ui_endFrame_i(fltk::ValueInput*, void*);
      static void cb_ui_endFrame(fltk::ValueInput*, void*);
      inline void cb_Play_i(fltk::Button*, void*);
      static void cb_Play(fltk::Button*, void*);
public:
      fltk::ValueInput *ui_curFrame;
private:
      inline void cb_ui_curFrame_i(fltk::ValueInput*, void*);
      static void cb_ui_curFrame(fltk::ValueInput*, void*);
      inline void cb_key_i(fltk::Button*, void*);
      static void cb_key(fltk::Button*, void*);
      inline void cb_key1_i(fltk::Button*, void*);
      static void cb_key1(fltk::Button*, void*);
      inline void cb_delete1_i(fltk::Button*, void*);
      static void cb_delete1(fltk::Button*, void*);
      inline void cb_move_i(fltk::Button*, void*);
      static void cb_move(fltk::Button*, void*);
      inline void cb_key2_i(fltk::Button*, void*);
      static void cb_key2(fltk::Button*, void*);
public:
      fltk::CheckButton *ui_playIK;
        fltk::RadioButton *ui_frameTog;
private:
        inline void cb_ui_frameTog_i(fltk::RadioButton*, void*);
        static void cb_ui_frameTog(fltk::RadioButton*, void*);
        inline void cb_seconds_i(fltk::RadioButton*, void*);
        static void cb_seconds(fltk::RadioButton*, void*);
public:
        fltk::ValueInput *ui_timefps;
};
#endif
