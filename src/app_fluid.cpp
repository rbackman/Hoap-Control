// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "app_fluid.h"

inline void AppFluid::cb_X_i(fltk::Item*, void*) {
  event ( evQuit );
}
void AppFluid::cb_X(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void AppFluid::cb_draw_i(fltk::ItemGroup*, void*) {
  event(evAxis);
}
void AppFluid::cb_draw(fltk::ItemGroup* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_draw_i(o,v);
}

inline void AppFluid::cb_parmeters_i(fltk::Item*, void*) {
  event ( evEditParameters );
}
void AppFluid::cb_parmeters(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_parmeters_i(o,v);
}

inline void AppFluid::cb_save_i(fltk::Item*, void*) {
  event(evSaveConfig);
}
void AppFluid::cb_save(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void AppFluid::cb_load_i(fltk::Item*, void*) {
  event(evLoadConfig);
}
void AppFluid::cb_load(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void AppFluid::cb_save1_i(fltk::Item*, void*) {
  event(evSavePos);
}
void AppFluid::cb_save1(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save1_i(o,v);
}

inline void AppFluid::cb_Graph_i(fltk::Item*, void*) {
  event(evGraphView);
}
void AppFluid::cb_Graph(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Graph_i(o,v);
}

inline void AppFluid::cb_Track_i(fltk::Item*, void*) {
  event(evShowTrack);
}
void AppFluid::cb_Track(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Track_i(o,v);
}

inline void AppFluid::cb_timeline_i(fltk::Item*, void*) {
  event(evTimeline);
}
void AppFluid::cb_timeline(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_timeline_i(o,v);
}

inline void AppFluid::cb_load1_i(fltk::Item*, void*) {
  event(evLoadMotion);
}
void AppFluid::cb_load1(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load1_i(o,v);
}

inline void AppFluid::cb_draw1_i(fltk::Item*, void*) {
  event(evDrawTraj);
}
void AppFluid::cb_draw1(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_draw1_i(o,v);
}

inline void AppFluid::cb_set_i(fltk::Item*, void*) {
  event(evSetStart);
}
void AppFluid::cb_set(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set_i(o,v);
}

inline void AppFluid::cb_set1_i(fltk::Item*, void*) {
  event(evSetEnd);
}
void AppFluid::cb_set1(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set1_i(o,v);
}

inline void AppFluid::cb_bake_i(fltk::Item*, void*) {
  event(evMakeWalk);
}
void AppFluid::cb_bake(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_bake_i(o,v);
}

inline void AppFluid::cb_make_i(fltk::Item*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_make(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make_i(o,v);
}

inline void AppFluid::cb_clear_i(fltk::Item*, void*) {
  event(evClearGoals);
}
void AppFluid::cb_clear(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_clear_i(o,v);
}

inline void AppFluid::cb_start_i(fltk::Item*, void*) {
  event(evStartQueue);
}
void AppFluid::cb_start(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_start_i(o,v);
}

inline void AppFluid::cb_reset_i(fltk::Item*, void*) {
  event(evResetWalk);
}
void AppFluid::cb_reset(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

inline void AppFluid::cb_send_i(fltk::Item*, void*) {
  event(evHello);
}
void AppFluid::cb_send(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_send_i(o,v);
}

inline void AppFluid::cb_get_i(fltk::Item*, void*) {
  event(evGetPos);
}
void AppFluid::cb_get(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_get_i(o,v);
}

inline void AppFluid::cb_send1_i(fltk::Item*, void*) {
  event(evSendPos);
}
void AppFluid::cb_send1(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_send1_i(o,v);
}

inline void AppFluid::cb_vicon_i(fltk::Item*, void*) {
  event(evViconConnect);
}
void AppFluid::cb_vicon(fltk::Item* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_vicon_i(o,v);
}

inline void AppFluid::cb_run_i(fltk::Button*, void*) {
  event(evPIKRun);
}
void AppFluid::cb_run(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_run_i(o,v);
}

inline void AppFluid::cb_reset1_i(fltk::Button*, void*) {
  event(evPIKReset);
}
void AppFluid::cb_reset1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset1_i(o,v);
}

inline void AppFluid::cb_ui_sikStiffness_i(fltk::ValueSlider*, void*) {
  event(evUpdateSprings);
}
void AppFluid::cb_ui_sikStiffness(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sikStiffness_i(o,v);
}

inline void AppFluid::cb_ui_sikDamp_i(fltk::ValueSlider*, void*) {
  event(evUpdateSprings);
}
void AppFluid::cb_ui_sikDamp(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sikDamp_i(o,v);
}

inline void AppFluid::cb_ui_sikGrav_i(fltk::ValueSlider*, void*) {
  event(evUpdateSprings);
}
void AppFluid::cb_ui_sikGrav(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sikGrav_i(o,v);
}

inline void AppFluid::cb_ui_sikStepSize_i(fltk::ValueSlider*, void*) {
  event(evUpdateSprings);
}
void AppFluid::cb_ui_sikStepSize(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sikStepSize_i(o,v);
}

inline void AppFluid::cb_ui_sikHandStiffness_i(fltk::ValueSlider*, void*) {
  event(evUpdateSprings);
}
void AppFluid::cb_ui_sikHandStiffness(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sikHandStiffness_i(o,v);
}

inline void AppFluid::cb_evaluate_i(fltk::Button*, void*) {
  event(evEval);
}
void AppFluid::cb_evaluate(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_evaluate_i(o,v);
}

inline void AppFluid::cb_run1_i(fltk::Button*, void*) {
  event(evRun);
}
void AppFluid::cb_run1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_run1_i(o,v);
}

inline void AppFluid::cb_reset2_i(fltk::Button*, void*) {
  event(evResetJacobian);
}
void AppFluid::cb_reset2(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset2_i(o,v);
}

inline void AppFluid::cb_ui_JacHips_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips_i(o,v);
}

inline void AppFluid::cb_ui_JacHips1_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips1(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips1_i(o,v);
}

inline void AppFluid::cb_ui_JacHips2_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips2(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips2_i(o,v);
}

inline void AppFluid::cb_ui_JacHips3_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips3(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips3_i(o,v);
}

inline void AppFluid::cb_ui_JacHips4_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips4(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips4_i(o,v);
}

inline void AppFluid::cb_ui_JacHips5_i(fltk::CheckButton*, void*) {
  event(evJacobianCreate);
}
void AppFluid::cb_ui_JacHips5(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_JacHips5_i(o,v);
}

inline void AppFluid::cb_ui_keylist_i(fltk::Browser*, void*) {
  event(evKeyMenu);
}
void AppFluid::cb_ui_keylist(fltk::Browser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_keylist_i(o,v);
}

inline void AppFluid::cb_Reset_i(fltk::Button*, void*) {
  event(evResetIK);
}
void AppFluid::cb_Reset(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

inline void AppFluid::cb_create_i(fltk::Button*, void*) {
  event(evSetIK);
}
void AppFluid::cb_create(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_create_i(o,v);
}

inline void AppFluid::cb_ui_visgeo_i(fltk::CheckButton*, void*) {
  event(evViewPref);
}
void AppFluid::cb_ui_visgeo(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_visgeo_i(o,v);
}

inline void AppFluid::cb_ui_jointaxis_i(fltk::CheckButton*, void*) {
  event(evViewPref);
}
void AppFluid::cb_ui_jointaxis(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointaxis_i(o,v);
}

inline void AppFluid::cb_Land_i(fltk::Button*, void*) {
  event(evLand);
}
void AppFluid::cb_Land(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Land_i(o,v);
}

inline void AppFluid::cb_ui_IK_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK_i(o,v);
}

inline void AppFluid::cb_ui_IK1_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK1(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK1_i(o,v);
}

inline void AppFluid::cb_ui_IK2_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK2(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK2_i(o,v);
}

inline void AppFluid::cb_ui_IK3_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK3(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK3_i(o,v);
}

inline void AppFluid::cb_ui_IK4_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK4(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK4_i(o,v);
}

inline void AppFluid::cb_ui_IK5_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK5(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK5_i(o,v);
}

inline void AppFluid::cb_ui_IK6_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK6(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK6_i(o,v);
}

inline void AppFluid::cb_ui_IK7_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK7(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK7_i(o,v);
}

inline void AppFluid::cb_ui_IK8_i(fltk::ValueSlider*, void*) {
  event(evIKSlide);
}
void AppFluid::cb_ui_IK8(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_IK8_i(o,v);
}

inline void AppFluid::cb_ui_arm_ik_active_i(fltk::CheckButton*, void*) {
  event(evArmIKActive);
}
void AppFluid::cb_ui_arm_ik_active(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_arm_ik_active_i(o,v);
}

inline void AppFluid::cb_ui_cont_stepDistance_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_stepDistance(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_stepDistance_i(o,v);
}

inline void AppFluid::cb_ui_cont_stepHeight_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_stepHeight(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_stepHeight_i(o,v);
}

inline void AppFluid::cb_ui_cont_stepVelocity_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_stepVelocity(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_stepVelocity_i(o,v);
}

inline void AppFluid::cb_ui_cont_time_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_time(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_time_i(o,v);
}

inline void AppFluid::cb_start1_i(fltk::Button*, void*) {
  event(evStartControl);
}
void AppFluid::cb_start1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_start1_i(o,v);
}

inline void AppFluid::cb_ui_cont_hipHeight_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_hipHeight(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_hipHeight_i(o,v);
}

inline void AppFluid::cb_ui_cont_hipDist_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_hipDist(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_hipDist_i(o,v);
}

inline void AppFluid::cb_stop_i(fltk::Button*, void*) {
  event(evControlStop);
}
void AppFluid::cb_stop(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_stop_i(o,v);
}

inline void AppFluid::cb_ui_cont_fps_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_fps(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_fps_i(o,v);
}

inline void AppFluid::cb_ui_cont_res_i(fltk::ValueSlider*, void*) {
  event(evControl);
}
void AppFluid::cb_ui_cont_res(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cont_res_i(o,v);
}

inline void AppFluid::cb_ui_actValues_i(fltk::CheckButton*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_actValues(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_actValues_i(o,v);
}

inline void AppFluid::cb_play_i(fltk::Button*, void*) {
  event(evPlayWalk);
}
void AppFluid::cb_play(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_play_i(o,v);
}

inline void AppFluid::cb_ui_turnAdjustAng_i(fltk::ValueSlider*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_turnAdjustAng(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_turnAdjustAng_i(o,v);
}

inline void AppFluid::cb_ui_stepHeight_i(fltk::ValueSlider*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_stepHeight(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_stepHeight_i(o,v);
}

inline void AppFluid::cb_ui_stepDistance_i(fltk::ValueSlider*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_stepDistance(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_stepDistance_i(o,v);
}

inline void AppFluid::cb_ui_numSteps_i(fltk::ValueOutput*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_numSteps(fltk::ValueOutput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_numSteps_i(o,v);
}

inline void AppFluid::cb_fwd_i(fltk::Button*, void*) {
  event(evHipFwd);
}
void AppFluid::cb_fwd(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_fwd_i(o,v);
}

inline void AppFluid::cb_rev_i(fltk::Button*, void*) {
  event(evHipRev);
}
void AppFluid::cb_rev(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rev_i(o,v);
}

inline void AppFluid::cb_left_i(fltk::Button*, void*) {
  event(evHipLeft);
}
void AppFluid::cb_left(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_left_i(o,v);
}

inline void AppFluid::cb_right_i(fltk::Button*, void*) {
  event(evHipRight);
}
void AppFluid::cb_right(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_right_i(o,v);
}

inline void AppFluid::cb_up_i(fltk::Button*, void*) {
  event(evHipUp);
}
void AppFluid::cb_up(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_up_i(o,v);
}

inline void AppFluid::cb_down_i(fltk::Button*, void*) {
  event(evHipDown);
}
void AppFluid::cb_down(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_down_i(o,v);
}

inline void AppFluid::cb_ui_numStepInterp_i(fltk::ValueInput*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_numStepInterp(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_numStepInterp_i(o,v);
}

inline void AppFluid::cb_ui_showRoot_i(fltk::CheckButton*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_showRoot(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showRoot_i(o,v);
}

inline void AppFluid::cb_reset3_i(fltk::Button*, void*) {
  event(evHipReset);
}
void AppFluid::cb_reset3(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset3_i(o,v);
}

inline void AppFluid::cb_add_i(fltk::Button*, void*) {
  event(evAddGoal);
}
void AppFluid::cb_add(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add_i(o,v);
}

inline void AppFluid::cb_Flatten_i(fltk::Button*, void*) {
  event(evFlatten);
}
void AppFluid::cb_Flatten(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Flatten_i(o,v);
}

inline void AppFluid::cb_Search_i(fltk::Button*, void*) {
  event(evSearch);
}
void AppFluid::cb_Search(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Search_i(o,v);
}

inline void AppFluid::cb_ui_moveRoot_i(fltk::CheckButton*, void*) {
  event(evMoveRoot);
}
void AppFluid::cb_ui_moveRoot(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_moveRoot_i(o,v);
}

inline void AppFluid::cb_Export_i(fltk::Button*, void*) {
  event(evExportMesh);
}
void AppFluid::cb_Export(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Export_i(o,v);
}

inline void AppFluid::cb_ui_channelRad_i(fltk::ValueSlider*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_channelRad(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_channelRad_i(o,v);
}

inline void AppFluid::cb_ui_pathRad_i(fltk::ValueSlider*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_pathRad(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_pathRad_i(o,v);
}

inline void AppFluid::cb_ui_pathdangle_i(fltk::ValueSlider*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_pathdangle(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_pathdangle_i(o,v);
}

inline void AppFluid::cb_ui_showTri_i(fltk::CheckButton*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_showTri(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showTri_i(o,v);
}

inline void AppFluid::cb_ui_showConst_i(fltk::CheckButton*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_showConst(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showConst_i(o,v);
}

inline void AppFluid::cb_ui_showFloorPoly_i(fltk::CheckButton*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_showFloorPoly(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showFloorPoly_i(o,v);
}

inline void AppFluid::cb_ui_showPath_i(fltk::CheckButton*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_showPath(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showPath_i(o,v);
}

inline void AppFluid::cb_ui_showChannel_i(fltk::CheckButton*, void*) {
  event(evSearch);
}
void AppFluid::cb_ui_showChannel(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showChannel_i(o,v);
}

inline void AppFluid::cb_ui_turnAdjustDist_i(fltk::ValueSlider*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_turnAdjustDist(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_turnAdjustDist_i(o,v);
}

inline void AppFluid::cb_ui_floorBoundingBox_i(fltk::CheckButton*, void*) {
  event(evFlatten);
}
void AppFluid::cb_ui_floorBoundingBox(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_floorBoundingBox_i(o,v);
}

inline void AppFluid::cb_pause_i(fltk::Button*, void*) {
  event(evPauseWalk);
}
void AppFluid::cb_pause(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_pause_i(o,v);
}

inline void AppFluid::cb_ui_hipsHeight_i(fltk::ValueSlider*, void*) {
  event(evMakeSteps);
}
void AppFluid::cb_ui_hipsHeight(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_hipsHeight_i(o,v);
}

inline void AppFluid::cb_ui_legBaseAngle_i(fltk::ValueSlider*, void*) {
  event(evLegBaseAngle);
}
void AppFluid::cb_ui_legBaseAngle(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_legBaseAngle_i(o,v);
}

inline void AppFluid::cb_ui_realtime_i(fltk::CheckButton*, void*) {
  event(evRealTime);
}
void AppFluid::cb_ui_realtime(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_realtime_i(o,v);
}

inline void AppFluid::cb_ui_stream_i(fltk::CheckButton*, void*) {
  event(evStream);
}
void AppFluid::cb_ui_stream(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_stream_i(o,v);
}

inline void AppFluid::cb_ui_objectList_i(fltk::Browser*, void*) {
  event(evObjSelected);
}
void AppFluid::cb_ui_objectList(fltk::Browser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objectList_i(o,v);
}

inline void AppFluid::cb_add1_i(fltk::Button*, void*) {
  event(evAddObj);
}
void AppFluid::cb_add1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add1_i(o,v);
}

inline void AppFluid::cb_delete_i(fltk::Button*, void*) {
  event(evDelObj);
}
void AppFluid::cb_delete(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete_i(o,v);
}

inline void AppFluid::cb_ui_objX_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objX(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objX_i(o,v);
}

inline void AppFluid::cb_ui_objY_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objY(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objY_i(o,v);
}

inline void AppFluid::cb_ui_objZ_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objZ(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objZ_i(o,v);
}

inline void AppFluid::cb_ui_objrX_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objrX(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objrX_i(o,v);
}

inline void AppFluid::cb_ui_objrY_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objrY(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objrY_i(o,v);
}

inline void AppFluid::cb_ui_objrZ_i(fltk::ValueSlider*, void*) {
  event(objMove);
}
void AppFluid::cb_ui_objrZ(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_objrZ_i(o,v);
}

inline void AppFluid::cb_ui_showScene_i(fltk::CheckButton*, void*) {
  event(evShowScene);
}
void AppFluid::cb_ui_showScene(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_showScene_i(o,v);
}

inline void AppFluid::cb_ui_Ang_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang_i(o,v);
}

inline void AppFluid::cb_ui_Ang1_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang1(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang1_i(o,v);
}

inline void AppFluid::cb_ui_Ang2_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang2(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang2_i(o,v);
}

inline void AppFluid::cb_ui_Ang3_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang3(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang3_i(o,v);
}

inline void AppFluid::cb_ui_Ang4_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang4(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang4_i(o,v);
}

inline void AppFluid::cb_ui_Ang5_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang5(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang5_i(o,v);
}

inline void AppFluid::cb_ui_Ang6_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang6(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang6_i(o,v);
}

inline void AppFluid::cb_ui_Ang7_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang7(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang7_i(o,v);
}

inline void AppFluid::cb_ui_Ang8_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang8(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang8_i(o,v);
}

inline void AppFluid::cb_ui_Ang9_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang9(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang9_i(o,v);
}

inline void AppFluid::cb_ui_Anga_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Anga(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Anga_i(o,v);
}

inline void AppFluid::cb_ui_Angb_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Angb(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Angb_i(o,v);
}

inline void AppFluid::cb_ui_Angc_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Angc(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Angc_i(o,v);
}

inline void AppFluid::cb_ui_Angd_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Angd(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Angd_i(o,v);
}

inline void AppFluid::cb_ui_Ange_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ange(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ange_i(o,v);
}

inline void AppFluid::cb_ui_Angf_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Angf(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Angf_i(o,v);
}

inline void AppFluid::cb_ui_Ang10_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang10(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang10_i(o,v);
}

inline void AppFluid::cb_ui_Ang11_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang11(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang11_i(o,v);
}

inline void AppFluid::cb_ui_Ang12_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang12(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang12_i(o,v);
}

inline void AppFluid::cb_ui_Ang13_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang13(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang13_i(o,v);
}

inline void AppFluid::cb_ui_Ang14_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang14(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang14_i(o,v);
}

inline void AppFluid::cb_ui_Ang15_i(fltk::ValueSlider*, void*) {
  event(evHead);
}
void AppFluid::cb_ui_Ang15(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang15_i(o,v);
}

inline void AppFluid::cb_ui_Ang16_i(fltk::ValueSlider*, void*) {
  event(evHead);
}
void AppFluid::cb_ui_Ang16(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang16_i(o,v);
}

inline void AppFluid::cb_ui_Ang17_i(fltk::ValueSlider*, void*) {
  event(evHead);
}
void AppFluid::cb_ui_Ang17(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang17_i(o,v);
}

inline void AppFluid::cb_ui_Ang18_i(fltk::ValueSlider*, void*) {
  event(evRthumb);
}
void AppFluid::cb_ui_Ang18(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang18_i(o,v);
}

inline void AppFluid::cb_ui_Ang19_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang19(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang19_i(o,v);
}

inline void AppFluid::cb_ui_Ang1a_i(fltk::ValueSlider*, void*) {
  event(evLthumb);
}
void AppFluid::cb_ui_Ang1a(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang1a_i(o,v);
}

inline void AppFluid::cb_ui_Ang1b_i(fltk::ValueSlider*, void*) {
  event(evJntSlide);
}
void AppFluid::cb_ui_Ang1b(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_Ang1b_i(o,v);
}

inline void AppFluid::cb_Zero_i(fltk::Button*, void*) {
  event ( evZero );
}
void AppFluid::cb_Zero(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Zero_i(o,v);
}

inline void AppFluid::cb_ui_intstep_i(fltk::ValueInput*, void*) {
  event(evIntStep);
}
void AppFluid::cb_ui_intstep(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_intstep_i(o,v);
}

inline void AppFluid::cb_send2_i(fltk::Button*, void*) {
  event(evSendPos);
}
void AppFluid::cb_send2(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_send2_i(o,v);
}

inline void AppFluid::cb_ui_E_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E_i(o,v);
}

inline void AppFluid::cb_ui_E1_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E1(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E1_i(o,v);
}

inline void AppFluid::cb_ui_E2_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E2(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E2_i(o,v);
}

inline void AppFluid::cb_ui_E3_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E3(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E3_i(o,v);
}

inline void AppFluid::cb_ui_E4_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E4(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E4_i(o,v);
}

inline void AppFluid::cb_ui_E5_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E5(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E5_i(o,v);
}

inline void AppFluid::cb_ui_E6_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E6(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E6_i(o,v);
}

inline void AppFluid::cb_ui_E7_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E7(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E7_i(o,v);
}

inline void AppFluid::cb_ui_E8_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E8(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E8_i(o,v);
}

inline void AppFluid::cb_ui_E9_i(fltk::LightButton*, void*) {
  event(evEyes);
}
void AppFluid::cb_ui_E9(fltk::LightButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_E9_i(o,v);
}

inline void AppFluid::cb_create1_i(fltk::Button*, void*) {
  event(evSetIK);
}
void AppFluid::cb_create1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_create1_i(o,v);
}

inline void AppFluid::cb_reset4_i(fltk::Button*, void*) {
  event(evResetIK);
}
void AppFluid::cb_reset4(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset4_i(o,v);
}

inline void AppFluid::cb_land_i(fltk::Button*, void*) {
  event(evLand);
}
void AppFluid::cb_land(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_land_i(o,v);
}

inline void AppFluid::cb_ui_wipeRadius_i(fltk::ValueSlider*, void*) {
  event(evMakeWipe);
}
void AppFluid::cb_ui_wipeRadius(fltk::ValueSlider* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_wipeRadius_i(o,v);
}

inline void AppFluid::cb_wipe_i(fltk::Button*, void*) {
  event(evWipe);
}
void AppFluid::cb_wipe(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_wipe_i(o,v);
}

inline void AppFluid::cb_make1_i(fltk::Button*, void*) {
  event(evMakeWipe)
;}
void AppFluid::cb_make1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make1_i(o,v);
}

inline void AppFluid::cb_ui_channelList_i(fltk::MultiBrowser*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelList(fltk::MultiBrowser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelList_i(o,v);
}

inline void AppFluid::cb_load2_i(fltk::Button*, void*) {
  event(evLoadChannels);
}
void AppFluid::cb_load2(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_load2_i(o,v);
}

inline void AppFluid::cb_ui_channelRX_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelRX(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelRX_i(o,v);
}

inline void AppFluid::cb_ui_channelRY_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelRY(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelRY_i(o,v);
}

inline void AppFluid::cb_ui_channelRZ_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelRZ(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelRZ_i(o,v);
}

inline void AppFluid::cb_ui_channelPX_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelPX(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelPX_i(o,v);
}

inline void AppFluid::cb_ui_channelPY_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelPY(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelPY_i(o,v);
}

inline void AppFluid::cb_ui_channelPZ_i(fltk::CheckButton*, void*) {
  event(evChannelSel);
}
void AppFluid::cb_ui_channelPZ(fltk::CheckButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_channelPZ_i(o,v);
}

inline void AppFluid::cb_free_i(fltk::Button*, void*) {
  event(evFreeTangent);
}
void AppFluid::cb_free(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_free_i(o,v);
}

inline void AppFluid::cb_make2_i(fltk::Button*, void*) {
  event(evMakeGroup);
}
void AppFluid::cb_make2(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_make2_i(o,v);
}

inline void AppFluid::cb_new_i(fltk::Button*, void*) {
  event(evMakeTrack);
}
void AppFluid::cb_new(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_new_i(o,v);
}

inline void AppFluid::cb_ui_keyGroups_i(fltk::Choice*, void*) {
  event(evKeyGroups);
}
void AppFluid::cb_ui_keyGroups(fltk::Choice* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_keyGroups_i(o,v);
}

inline void AppFluid::cb_ui_TrackList_i(fltk::Choice*, void*) {
  event(evTrackList);
}
void AppFluid::cb_ui_TrackList(fltk::Choice* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_TrackList_i(o,v);
}

inline void AppFluid::cb_ui_TrackListNla_i(fltk::MultiBrowser*, void*) {
  event(evTrackList);
}
void AppFluid::cb_ui_TrackListNla(fltk::MultiBrowser* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_TrackListNla_i(o,v);
}

inline void AppFluid::cb_insert_i(fltk::Button*, void*) {
  event(evInsertTrack);
}
void AppFluid::cb_insert(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_insert_i(o,v);
}

inline void AppFluid::cb_load3_i(fltk::Button*, void*) {
  event(evLoadTracks);
}
void AppFluid::cb_load3(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_load3_i(o,v);
}

inline void AppFluid::cb_Foot_i(fltk::Button*, void*) {
  event(evFoot);
}
void AppFluid::cb_Foot(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_Foot_i(o,v);
}

inline void AppFluid::cb_ui_startFrame_i(fltk::ValueInput*, void*) {
  event(evTimeSlider);
}
void AppFluid::cb_ui_startFrame(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_startFrame_i(o,v);
}

inline void AppFluid::cb_ui_endFrame_i(fltk::ValueInput*, void*) {
  event(evTimeSlider);
}
void AppFluid::cb_ui_endFrame(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_endFrame_i(o,v);
}

inline void AppFluid::cb_Play_i(fltk::Button*, void*) {
  event(evPlay);
}
void AppFluid::cb_Play(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_Play_i(o,v);
}

inline void AppFluid::cb_ui_curFrame_i(fltk::ValueInput*, void*) {
  event(evTimeSlider);
}
void AppFluid::cb_ui_curFrame(fltk::ValueInput* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_ui_curFrame_i(o,v);
}

inline void AppFluid::cb_key_i(fltk::Button*, void*) {
  event(evInsert);
}
void AppFluid::cb_key(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_key_i(o,v);
}

inline void AppFluid::cb_key1_i(fltk::Button*, void*) {
  event(evSet);
}
void AppFluid::cb_key1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_key1_i(o,v);
}

inline void AppFluid::cb_delete1_i(fltk::Button*, void*) {
  event(evDelete);
}
void AppFluid::cb_delete1(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_delete1_i(o,v);
}

inline void AppFluid::cb_move_i(fltk::Button*, void*) {
  event(evMoveKey);
}
void AppFluid::cb_move(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_move_i(o,v);
}

inline void AppFluid::cb_key2_i(fltk::Button*, void*) {
  event(evIKKey);
}
void AppFluid::cb_key2(fltk::Button* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->user_data()))->cb_key2_i(o,v);
}

inline void AppFluid::cb_ui_frameTog_i(fltk::RadioButton*, void*) {
  event(evFrameToggle);
}
void AppFluid::cb_ui_frameTog(fltk::RadioButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_frameTog_i(o,v);
}

inline void AppFluid::cb_seconds_i(fltk::RadioButton*, void*) {
  event(evFrameToggle);
}
void AppFluid::cb_seconds(fltk::RadioButton* o, void* v) {
  ((AppFluid*)(o->parent()->parent()->parent()->user_data()))->cb_seconds_i(o,v);
}

AppFluid::AppFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(910, 575, "Hoap Controller");
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 910, 575);
      o->color((fltk::Color)0xb4b2f000);
      o->begin();
       {fltk::Group* o = new fltk::Group(320, 15, 585, 555);
        o->begin();
         {fltk::Group* o = ui_message = new fltk::Group(0, 535, 585, 20, "text");
          o->box(fltk::DOWN_BOX);
          o->labelfont(fltk::HELVETICA_BOLD);
          o->textfont(fltk::HELVETICA_BOLD);
          o->color((fltk::Color)0xf7f9ff00);
          o->textcolor((fltk::Color)0xa7000000);
          o->labelcolor((fltk::Color)0xbd000000);
          o->labelsize(11);
          o->textsize(11);
          o->align(fltk::ALIGN_INSIDE);
        }
         {AppViewer* o = ui_viewer = new AppViewer(0, 5, 585, 530);
          o->box(fltk::DOWN_BOX);
          o->color((fltk::Color)0xa9a9a900);
          fltk::Group::current()->resizable(o);
        }
        o->end();
      }
       {fltk::Group* o = ui_main_group = new fltk::Group(10, 0, 310, 575);
        o->set_vertical();
        o->box(fltk::FLAT_BOX);
        o->begin();
         {fltk::MenuBar* o = new fltk::MenuBar(0, 0, 292, 20);
          o->shortcut(0xffe9);
          o->begin();
           {fltk::Item* o = new fltk::Item("X");
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->color((fltk::Color)0xece9d800);
            o->textcolor((fltk::Color)0xd40d2900);
            o->selection_textcolor((fltk::Color)0xff122b00);
            o->callback((fltk::Callback*)cb_X);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("draw");
            o->color((fltk::Color)0xece9d800);
            o->callback((fltk::Callback*)cb_draw);
            o->begin();
            new fltk::Item("axis");
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("parmeters");
              o->callback((fltk::Callback*)cb_parmeters);
            }
             {fltk::Item* o = new fltk::Item("save config");
              o->callback((fltk::Callback*)cb_save);
            }
             {fltk::Item* o = new fltk::Item("load config");
              o->callback((fltk::Callback*)cb_load);
            }
             {fltk::Item* o = new fltk::Item("save posture to csv");
              o->callback((fltk::Callback*)cb_save1);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("view");
            o->begin();
             {fltk::Item* o = new fltk::Item("Graph Viewer");
              o->callback((fltk::Callback*)cb_Graph);
            }
             {fltk::Item* o = new fltk::Item("Track Editor");
              o->callback((fltk::Callback*)cb_Track);
            }
             {fltk::Item* o = new fltk::Item("timeline");
              o->callback((fltk::Callback*)cb_timeline);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("motion");
            o->begin();
             {fltk::Item* o = new fltk::Item("load motion");
              o->callback((fltk::Callback*)cb_load1);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("walk");
            o->begin();
             {fltk::Item* o = new fltk::Item("draw trajectory");
              o->callback((fltk::Callback*)cb_draw1);
            }
             {fltk::Item* o = new fltk::Item("set walk start");
              o->callback((fltk::Callback*)cb_set);
            }
             {fltk::Item* o = new fltk::Item("set walk end");
              o->callback((fltk::Callback*)cb_set1);
            }
             {fltk::Item* o = new fltk::Item("bake walk");
              o->callback((fltk::Callback*)cb_bake);
            }
             {fltk::Item* o = new fltk::Item("make steps");
              o->callback((fltk::Callback*)cb_make);
            }
             {fltk::Item* o = new fltk::Item("clear goals");
              o->callback((fltk::Callback*)cb_clear);
            }
             {fltk::Item* o = new fltk::Item("start queue");
              o->callback((fltk::Callback*)cb_start);
            }
             {fltk::Item* o = new fltk::Item("reset walk");
              o->callback((fltk::Callback*)cb_reset);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("net");
            o->begin();
            new fltk::Divider();
            new fltk::Item("hoap connect");
             {fltk::Item* o = new fltk::Item("send hello");
              o->callback((fltk::Callback*)cb_send);
            }
             {fltk::Item* o = new fltk::Item("get current position");
              o->callback((fltk::Callback*)cb_get);
            }
             {fltk::Item* o = new fltk::Item("send current posture");
              o->callback((fltk::Callback*)cb_send1);
            }
            new fltk::Divider();
             {fltk::Item* o = new fltk::Item("vicon connect");
              o->callback((fltk::Callback*)cb_vicon);
            }
            o->end();
          }
          o->end();
        }
         {fltk::Group* o = new fltk::Group(0, 20, 310, 555);
          o->set_vertical();
          o->box(fltk::DOWN_BOX);
          o->color((fltk::Color)0xc3e6f000);
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 0, 310, 555);
            o->set_vertical();
            o->box(fltk::FLAT_BOX);
            o->begin();
             {fltk::Group* o = new fltk::Group(25, 25, 285, 530, "PIK");
              o->set_vertical();
              o->begin();
               {fltk::Button* o = new fltk::Button(25, 25, 130, 30, "run");
                o->callback((fltk::Callback*)cb_run);
              }
               {fltk::Button* o = new fltk::Button(25, 55, 130, 30, "reset");
                o->callback((fltk::Callback*)cb_reset1);
              }
               {fltk::ValueSlider* o = ui_sikStiffness = new fltk::ValueSlider(65, 95, 130, 30, "arm stiffness");
                o->maximum(5);
                o->value(2.7);
                o->callback((fltk::Callback*)cb_ui_sikStiffness);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_sikDamp = new fltk::ValueSlider(65, 170, 130, 30, "damping");
                o->value(0.6);
                o->callback((fltk::Callback*)cb_ui_sikDamp);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_sikGrav = new fltk::ValueSlider(65, 200, 130, 30, "gravity");
                o->callback((fltk::Callback*)cb_ui_sikGrav);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_sikStepSize = new fltk::ValueSlider(65, 225, 130, 30, "step size");
                o->value(0.1);
                o->callback((fltk::Callback*)cb_ui_sikStepSize);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_sikHandStiffness = new fltk::ValueSlider(65, 125, 130, 30, "hand stiffness");
                o->maximum(5);
                o->value(2.7);
                o->callback((fltk::Callback*)cb_ui_sikHandStiffness);
                o->align(fltk::ALIGN_LEFT);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(25, 25, 285, 530, "JIK");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::Button* o = new fltk::Button(115, 45, 115, 25, "evaluate");
                o->callback((fltk::Callback*)cb_evaluate);
              }
               {fltk::ValueInput* o = ui_dEnd = new fltk::ValueInput(115, 70, 115, 25, "end effector step");
                o->minimum(0.0001);
                o->maximum(20);
                o->step(0.001);
                o->value(0.5);
              }
               {fltk::Button* o = new fltk::Button(115, 95, 115, 25, "run");
                o->callback((fltk::Callback*)cb_run1);
              }
               {fltk::Button* o = new fltk::Button(115, 120, 115, 25, "reset");
                o->callback((fltk::Callback*)cb_reset2);
              }
               {fltk::ValueInput* o = ui_tol = new fltk::ValueInput(115, 145, 115, 25, "end point tol");
                o->minimum(0.0001);
                o->maximum(3);
                o->step(0.01);
                o->value(1);
              }
               {fltk::Choice* o = ui_solveMethod = new fltk::Choice(115, 20, 115, 25, "solve method");
                o->begin();
                new fltk::Item("pseudo-Inverse");
                new fltk::Item("transpose");
                new fltk::Item("damped least squares");
                o->end();
              }
               {fltk::CheckButton* o = ui_debug = new fltk::CheckButton(30, 205, 25, 25, "debug");
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_dampC = new fltk::ValueSlider(100, 240, 115, 25, "damping constant");
                o->maximum(100);
                o->step(0.1);
                o->value(2);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_col = new fltk::CheckButton(205, 300, 25, 25, "collision");
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueInput* o = ui_obsRep = new fltk::ValueInput(115, 325, 115, 25, "obstacle repel");
                o->minimum(-3);
                o->maximum(3);
                o->step(0.01);
                o->value(-1);
              }
               {fltk::ValueSlider* o = ui_falloff = new fltk::ValueSlider(115, 350, 115, 25, "fall off");
                o->maximum(100);
                o->step(0.1);
                o->value(8);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_maxV = new fltk::ValueSlider(115, 390, 115, 25, "max Velocity");
                o->minimum(0.001);
                o->maximum(2);
                o->step(0.1);
                o->value(0.001);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_stopSolve = new fltk::CheckButton(70, 205, 25, 25, "stop");
                o->set_flag(fltk::STATE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(55, 432, 150, 70);
                o->box(fltk::DOWN_BOX);
              }
               {fltk::ValueInput* o = ui_JtransVel = new fltk::ValueInput(115, 170, 115, 25, "root trans Vel");
                o->minimum(0.0001);
                o->maximum(3);
                o->step(0.01);
                o->value(0.1);
              }
              ui_hipsJacobian = new fltk::CheckButton(130, 205, 25, 25, "hips");
               {fltk::CheckButton* o = ui_JacHips[0] = new fltk::CheckButton(105, 435, 25, 25, "X");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_JacHips[1] = new fltk::CheckButton(105, 455, 25, 25, "Y");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips1);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_JacHips[2] = new fltk::CheckButton(105, 474, 25, 25, "X");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips2);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_JacHips[3] = new fltk::CheckButton(170, 436, 25, 25, "X");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips3);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_JacHips[4] = new fltk::CheckButton(170, 456, 25, 25, "Y");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips4);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_JacHips[5] = new fltk::CheckButton(170, 475, 25, 25, "X");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_JacHips5);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(65, 455, 25, 25, "Hips Rot");
                o->align(fltk::ALIGN_INSIDE|fltk::ALIGN_WRAP);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(130, 455, 25, 25, "Hips Pos");
                o->align(fltk::ALIGN_INSIDE|fltk::ALIGN_WRAP);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 305, 515, "IK");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::Browser* o = ui_keylist = new fltk::Browser(95, 25, 125, 155);
                o->set_vertical();
                o->callback((fltk::Callback*)cb_ui_keylist);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 295, 290, 220);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9a9a9a00);
              }
               {fltk::Button* o = new fltk::Button(10, 305, 60, 30, "Reset IK");
                o->callback((fltk::Callback*)cb_Reset);
              }
               {fltk::Group* o = new fltk::Group(214, 342, 56, 50);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd2d2d200);
                o->begin();
                ui_ikrot = new fltk::RadioButton(0, 0, 25, 25, "Rot");
                 {fltk::RadioButton* o = new fltk::RadioButton(0, 25, 25, 25, "Trans");
                  o->set_flag(fltk::STATE);
                }
                o->end();
              }
               {fltk::Button* o = new fltk::Button(10, 340, 60, 30, "create IK");
                o->callback((fltk::Callback*)cb_create);
              }
               {fltk::CheckButton* o = ui_visgeo = new fltk::CheckButton(60, 215, 60, 20, "visgeo");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_visgeo);
              }
              ui_skeleton = new fltk::CheckButton(60, 235, 60, 20, "skeleton");
              ui_part_com = new fltk::CheckButton(60, 255, 60, 20, "parts COM");
              ui_com = new fltk::CheckButton(160, 195, 60, 20, "COM");
              ui_support = new fltk::CheckButton(160, 215, 60, 20, "support");
              ui_test_collisions = new fltk::CheckButton(160, 235, 60, 20, "collisions");
               {fltk::CheckButton* o = ui_jointaxis = new fltk::CheckButton(60, 195, 60, 20, "draw joint axis");
                o->callback((fltk::Callback*)cb_ui_jointaxis);
              }
               {fltk::Button* o = new fltk::Button(10, 375, 60, 30, "Land");
                o->callback((fltk::Callback*)cb_Land);
              }
               {fltk::ValueSlider* o = ui_IK[0] = new fltk::ValueSlider(20, 435, 115, 25, "X");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[1] = new fltk::ValueSlider(20, 460, 115, 25, "Y");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK1);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[2] = new fltk::ValueSlider(20, 485, 115, 25, "Z");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK2);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[3] = new fltk::ValueSlider(165, 435, 115, 25, "X");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK3);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[4] = new fltk::ValueSlider(165, 460, 115, 25, "Y");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK4);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[5] = new fltk::ValueSlider(165, 485, 115, 25, "Z");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK5);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[6] = new fltk::ValueSlider(90, 325, 115, 25, "X");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK6);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[7] = new fltk::ValueSlider(90, 350, 115, 25, "Y");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK7);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_IK[8] = new fltk::ValueSlider(90, 375, 115, 25, "Z");
                o->minimum(-10);
                o->maximum(10);
                o->step(0.2);
                o->callback((fltk::Callback*)cb_ui_IK8);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(105, 300, 75, 20, "Base IK");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9a9a9a00);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(40, 410, 75, 20, "Left Foot IK");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9a9a9a00);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(180, 410, 75, 20, "Right Foot IK");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9a9a9a00);
              }
               {fltk::CheckButton* o = ui_arm_ik_active = new fltk::CheckButton(160, 255, 60, 20, "arm IK");
                o->callback((fltk::Callback*)cb_ui_arm_ik_active);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 305, 515, "Ctl");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::ValueSlider* o = ui_cont_stepDistance = new fltk::ValueSlider(55, 140, 145, 20, "step distance");
                o->maximum(20);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_cont_stepDistance);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_cont_stepHeight = new fltk::ValueSlider(55, 175, 145, 20, "step height");
                o->maximum(20);
                o->value(3);
                o->callback((fltk::Callback*)cb_ui_cont_stepHeight);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_cont_stepVelocity = new fltk::ValueSlider(55, 495, 145, 20, "velocity");
                o->maximum(20);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_cont_stepVelocity);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_cont_time = new fltk::ValueSlider(20, 35, 230, 25, "time");
                o->callback((fltk::Callback*)cb_ui_cont_time);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::Button* o = new fltk::Button(55, 390, 145, 20, "start ");
                o->callback((fltk::Callback*)cb_start1);
              }
               {fltk::Choice* o = ui_cont_state = new fltk::Choice(85, 75, 125, 25, "Step State");
                o->begin();
                new fltk::Item("RootToLeft");
                new fltk::Item("RootToRight");
                new fltk::Item("RightMove");
                new fltk::Item("LeftMove");
                new fltk::Item("RightToRest");
                new fltk::Item("LeftToRest");
                new fltk::Item("RestToLeft");
                new fltk::Item("RestToRight");
                o->end();
              }
               {fltk::ValueSlider* o = ui_cont_hipHeight = new fltk::ValueSlider(55, 210, 145, 20, "hips height");
                o->minimum(20);
                o->maximum(40);
                o->value(37.4);
                o->callback((fltk::Callback*)cb_ui_cont_hipHeight);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_cont_hipDist = new fltk::ValueSlider(55, 245, 145, 20, "hips distance");
                o->maximum(10);
                o->value(3);
                o->callback((fltk::Callback*)cb_ui_cont_hipDist);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::Button* o = new fltk::Button(55, 360, 145, 25, "stop");
                o->callback((fltk::Callback*)cb_stop);
              }
               {fltk::ValueSlider* o = ui_cont_fps = new fltk::ValueSlider(55, 285, 145, 20, "fps");
                o->maximum(120);
                o->step(1);
                o->value(30);
                o->callback((fltk::Callback*)cb_ui_cont_fps);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_cont_res = new fltk::ValueSlider(55, 315, 145, 20, "resolution");
                o->minimum(12);
                o->maximum(100);
                o->step(1);
                o->value(30);
                o->callback((fltk::Callback*)cb_ui_cont_res);
                o->align(fltk::ALIGN_TOP);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 30, 285, 525, "Sns");
              o->set_vertical();
              o->hide();
              o->begin();
              ui_renc[6] = new fltk::ValueOutput(60, 230, 65, 25, "Rsh");
              ui_renc[7] = new fltk::ValueOutput(60, 255, 65, 25, "Rua");
              ui_renc[8] = new fltk::ValueOutput(60, 280, 65, 25, "Ruar");
              ui_renc[9] = new fltk::ValueOutput(60, 305, 65, 25, "Rfa");
              ui_renc[16] = new fltk::ValueOutput(190, 230, 65, 25, "Lsh");
              ui_renc[17] = new fltk::ValueOutput(190, 255, 65, 25, "Lua");
              ui_renc[18] = new fltk::ValueOutput(190, 280, 65, 25, "Luar");
              ui_renc[19] = new fltk::ValueOutput(190, 305, 65, 25, "Lfa");
              ui_renc[20] = new fltk::ValueOutput(125, 332, 65, 25, "legBase");
              ui_renc[2] = new fltk::ValueOutput(55, 420, 65, 25, "RLeg");
              ui_renc[1] = new fltk::ValueOutput(55, 395, 65, 25, "RLegPitch");
              ui_renc[0] = new fltk::ValueOutput(55, 370, 65, 25, "RlegRoll");
              ui_renc[3] = new fltk::ValueOutput(55, 445, 65, 25, "Rknee");
              ui_renc[4] = new fltk::ValueOutput(55, 470, 65, 25, "Rfoottwist");
              ui_renc[5] = new fltk::ValueOutput(55, 495, 65, 25, "Rfootpitch");
              ui_renc[12] = new fltk::ValueOutput(190, 415, 65, 25, "LLeg");
              ui_renc[11] = new fltk::ValueOutput(190, 390, 65, 25, "LLegPitch");
              ui_renc[10] = new fltk::ValueOutput(190, 365, 65, 25, "LLegRoll");
              ui_renc[13] = new fltk::ValueOutput(190, 440, 65, 25, "LKnee");
              ui_renc[14] = new fltk::ValueOutput(190, 465, 65, 25, "LFoottwist");
              ui_renc[15] = new fltk::ValueOutput(190, 490, 65, 25, "Lfootpitch");
              ui_sense[0] = new fltk::ValueOutput(85, 20, 40, 25, "front right");
              ui_sense[1] = new fltk::ValueOutput(85, 45, 40, 25, "front left");
              ui_sense[2] = new fltk::ValueOutput(85, 70, 40, 25, "back right");
              ui_sense[3] = new fltk::ValueOutput(85, 95, 40, 25, "back left");
              ui_sense[4] = new fltk::ValueOutput(185, 20, 40, 25, "front right");
              ui_sense[5] = new fltk::ValueOutput(185, 45, 40, 25, "front left");
              ui_sense[6] = new fltk::ValueOutput(185, 70, 40, 25, "back right");
              ui_sense[7] = new fltk::ValueOutput(185, 95, 40, 25, "back left");
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(55, 0, 75, 25, "right foot");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(155, 0, 75, 25, "left foot");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(70, 115, 75, 25, "accel");
                o->align(fltk::ALIGN_INSIDE);
              }
              ui_sense[8] = new fltk::ValueOutput(85, 135, 40, 25, "X");
              ui_sense[9] = new fltk::ValueOutput(85, 160, 40, 25, "Y");
              ui_sense[10] = new fltk::ValueOutput(85, 185, 40, 25, "Z");
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(170, 120, 75, 25, "gyro");
                o->align(fltk::ALIGN_INSIDE);
              }
              ui_sense[11] = new fltk::ValueOutput(185, 140, 40, 25, "X");
              ui_sense[12] = new fltk::ValueOutput(185, 165, 40, 25, "Y");
              ui_sense[13] = new fltk::ValueOutput(185, 190, 40, 25, "Z");
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 305, 505, "Enc");
              o->set_vertical();
              o->labelfont(fltk::HELVETICA_BOLD);
              o->labelsize(11);
              o->textsize(11);
              o->hide();
              o->begin();
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(1, 35, 270, 445);
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xc0d5f000);
              }
              ui_enc[6] = new fltk::ValueOutput(62, 124, 65, 25, "Rsh");
              ui_enc[7] = new fltk::ValueOutput(62, 149, 65, 25, "Rua");
              ui_enc[8] = new fltk::ValueOutput(62, 174, 65, 25, "Ruar");
              ui_enc[9] = new fltk::ValueOutput(62, 199, 65, 25, "Rfa");
              ui_enc[25] = new fltk::ValueOutput(62, 224, 65, 25, "Rfar");
              ui_enc[16] = new fltk::ValueOutput(197, 124, 65, 25, "Lsh");
              ui_enc[17] = new fltk::ValueOutput(197, 149, 65, 25, "Lua");
              ui_enc[18] = new fltk::ValueOutput(197, 174, 65, 25, "Luar");
              ui_enc[19] = new fltk::ValueOutput(197, 199, 65, 25, "Lfa");
              ui_enc[27] = new fltk::ValueOutput(197, 224, 65, 25, "Lfar");
              ui_enc[20] = new fltk::ValueOutput(132, 282, 65, 25, "legBase");
              ui_enc[2] = new fltk::ValueOutput(62, 370, 65, 25, "RLeg");
              ui_enc[1] = new fltk::ValueOutput(62, 345, 65, 25, "RLegPitch");
              ui_enc[0] = new fltk::ValueOutput(62, 320, 65, 25, "RlegRoll");
              ui_enc[3] = new fltk::ValueOutput(62, 395, 65, 25, "Rknee");
              ui_enc[4] = new fltk::ValueOutput(62, 420, 65, 25, "Rfoottwist");
              ui_enc[5] = new fltk::ValueOutput(62, 445, 65, 25, "Rfootpitch");
              ui_enc[12] = new fltk::ValueOutput(197, 365, 65, 25, "LLeg");
              ui_enc[11] = new fltk::ValueOutput(197, 340, 65, 25, "LLegPitch");
              ui_enc[10] = new fltk::ValueOutput(197, 315, 65, 25, "LLegRoll");
              ui_enc[13] = new fltk::ValueOutput(197, 390, 65, 25, "LKnee");
              ui_enc[14] = new fltk::ValueOutput(197, 415, 65, 25, "LFoottwist");
              ui_enc[15] = new fltk::ValueOutput(197, 440, 65, 25, "Lfootpitch");
              ui_enc[24] = new fltk::ValueOutput(62, 249, 65, 25, "Rfinger");
              ui_enc[26] = new fltk::ValueOutput(197, 249, 65, 25, "Lfinger");
              ui_enc[23] = new fltk::ValueOutput(128, 44, 65, 25, "Head R");
              ui_enc[22] = new fltk::ValueOutput(128, 69, 65, 25, "Head P");
              ui_enc[21] = new fltk::ValueOutput(128, 94, 65, 25, "Head T");
               {fltk::CheckButton* o = ui_actValues = new fltk::CheckButton(25, 10, 85, 25, "Actual Values");
                o->callback((fltk::Callback*)cb_ui_actValues);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(0, 30, 305, 505, "Walk");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(15, 5, 270, 75);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(155, 80, 130, 85);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(15, 335, 270, 170, "DCDT");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(15, 80, 140, 254, "Walk Params");
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::Button* o = new fltk::Button(60, 15, 50, 30, "play walk");
                o->buttonbox(fltk::ROUND_UP_BOX);
                o->color((fltk::Color)0xff0000);
                o->callback((fltk::Callback*)cb_play);
                o->align(fltk::ALIGN_WRAP);
              }
               {fltk::ValueSlider* o = ui_turnAdjustAng = new fltk::ValueSlider(25, 165, 110, 15, "turn adjust angle");
                o->maximum(90);
                o->value(8);
                o->callback((fltk::Callback*)cb_ui_turnAdjustAng);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_stepHeight = new fltk::ValueSlider(26, 225, 110, 15, "foot height");
                o->maximum(20);
                o->value(2.5);
                o->callback((fltk::Callback*)cb_ui_stepHeight);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_stepDistance = new fltk::ValueSlider(26, 284, 110, 16, "max step dist");
                o->maximum(30);
                o->value(18);
                o->callback((fltk::Callback*)cb_ui_stepDistance);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueOutput* o = ui_numSteps = new fltk::ValueOutput(245, 350, 35, 30, "Num Steps");
                o->step(1);
                o->value(5);
                o->callback((fltk::Callback*)cb_ui_numSteps);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(155, 165, 130, 170, "Hip Adjust");
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::Button* o = new fltk::Button(208, 215, 30, 20, "fwd");
                o->callback((fltk::Callback*)cb_fwd);
              }
               {fltk::Button* o = new fltk::Button(208, 255, 30, 20, "rev");
                o->callback((fltk::Callback*)cb_rev);
              }
               {fltk::Button* o = new fltk::Button(175, 235, 30, 20, "left");
                o->callback((fltk::Callback*)cb_left);
              }
               {fltk::Button* o = new fltk::Button(240, 235, 30, 20, "right");
                o->callback((fltk::Callback*)cb_right);
              }
               {fltk::Button* o = new fltk::Button(180, 275, 35, 20, "up");
                o->callback((fltk::Callback*)cb_up);
              }
               {fltk::Button* o = new fltk::Button(230, 275, 35, 20, "down");
                o->callback((fltk::Callback*)cb_down);
              }
               {fltk::ValueInput* o = ui_hipAmount = new fltk::ValueInput(180, 305, 35, 25, "amt");
                o->maximum(5);
                o->step(0.2);
                o->value(0.2);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
              }
               {fltk::ValueInput* o = ui_numStepInterp = new fltk::ValueInput(25, 125, 30, 25, "Interps");
                o->step(1);
                o->value(30);
                o->callback((fltk::Callback*)cb_ui_numStepInterp);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
              }
               {fltk::ValueInput* o = ui_StepFPS = new fltk::ValueInput(67, 125, 30, 25, "fps");
                o->maximum(120);
                o->step(1);
                o->value(30);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::CheckButton* o = ui_showRoot = new fltk::CheckButton(170, 85, 20, 15, "show root");
                o->callback((fltk::Callback*)cb_ui_showRoot);
              }
              ui_playIncr = new fltk::CheckButton(170, 100, 20, 15, "play incremental");
               {fltk::Button* o = new fltk::Button(230, 305, 35, 20, "reset");
                o->callback((fltk::Callback*)cb_reset3);
              }
               {fltk::Button* o = new fltk::Button(170, 15, 50, 30, "add goal");
                o->color((fltk::Color)0xe6e6e600);
                o->callback((fltk::Callback*)cb_add);
                o->align(fltk::ALIGN_WRAP);
              }
               {fltk::Button* o = new fltk::Button(30, 355, 45, 25, "Flatten");
                o->callback((fltk::Callback*)cb_Flatten);
              }
               {fltk::Button* o = new fltk::Button(75, 355, 45, 25, "Search");
                o->callback((fltk::Callback*)cb_Search);
              }
               {fltk::CheckButton* o = ui_moveRoot = new fltk::CheckButton(170, 115, 20, 15, "move root");
                o->callback((fltk::Callback*)cb_ui_moveRoot);
              }
               {fltk::Button* o = new fltk::Button(120, 355, 45, 25, "Export ");
                o->callback((fltk::Callback*)cb_Export);
              }
               {fltk::ValueSlider* o = ui_channelRad = new fltk::ValueSlider(170, 399, 110, 21, "channel Rad");
                o->maximum(50);
                o->value(18);
                o->callback((fltk::Callback*)cb_ui_channelRad);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_pathRad = new fltk::ValueSlider(170, 434, 110, 21, "path Rad");
                o->maximum(40);
                o->value(18);
                o->callback((fltk::Callback*)cb_ui_pathRad);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::ValueSlider* o = ui_pathdangle = new fltk::ValueSlider(170, 469, 110, 21, "dandgle");
                o->maximum(90);
                o->value(5);
                o->callback((fltk::Callback*)cb_ui_pathdangle);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::CheckButton* o = ui_showTri = new fltk::CheckButton(30, 411, 20, 20, "show triangles");
                o->set_vertical();
                o->callback((fltk::Callback*)cb_ui_showTri);
              }
               {fltk::CheckButton* o = ui_showConst = new fltk::CheckButton(30, 428, 20, 20, "show constraints");
                o->callback((fltk::Callback*)cb_ui_showConst);
              }
               {fltk::CheckButton* o = ui_showFloorPoly = new fltk::CheckButton(30, 445, 20, 20, "show floor poly");
                o->callback((fltk::Callback*)cb_ui_showFloorPoly);
              }
               {fltk::CheckButton* o = ui_showPath = new fltk::CheckButton(30, 396, 20, 20, "show path");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_showPath);
              }
               {fltk::CheckButton* o = ui_showChannel = new fltk::CheckButton(30, 460, 20, 20, "show channel");
                o->callback((fltk::Callback*)cb_ui_showChannel);
              }
               {fltk::ValueSlider* o = ui_turnAdjustDist = new fltk::ValueSlider(25, 195, 110, 15, "turn adjust dist");
                o->maximum(10);
                o->value(1.8);
                o->callback((fltk::Callback*)cb_ui_turnAdjustDist);
                o->align(fltk::ALIGN_TOP);
              }
              ui_autoStart = new fltk::CheckButton(170, 131, 20, 15, "auto Start queue");
               {fltk::CheckButton* o = ui_floorBoundingBox = new fltk::CheckButton(30, 380, 20, 20, "bounding box");
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_floorBoundingBox);
              }
               {fltk::Button* o = new fltk::Button(115, 15, 50, 30, "pause walk");
                o->buttonbox(fltk::ROUND_UP_BOX);
                o->color((fltk::Color)0xff002400);
                o->callback((fltk::Callback*)cb_pause);
                o->align(fltk::ALIGN_WRAP);
              }
               {fltk::ValueInput* o = ui_rtCycleTime = new fltk::ValueInput(105, 125, 30, 25, "rtCycle");
                o->minimum(1);
                o->maximum(10);
                o->step(1);
                o->value(1);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_hipsHeight = new fltk::ValueSlider(25, 255, 110, 15, "hips height");
                o->minimum(30);
                o->maximum(37.393);
                o->value(34);
                o->callback((fltk::Callback*)cb_ui_hipsHeight);
                o->align(fltk::ALIGN_TOP);
              }
              ui_drawTraj = new fltk::CheckButton(170, 145, 20, 15, "update trajectory");
               {fltk::ValueSlider* o = ui_legBaseAngle = new fltk::ValueSlider(25, 314, 110, 16, "leg base angle");
                o->maximum(30);
                o->callback((fltk::Callback*)cb_ui_legBaseAngle);
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::Choice* o = ui_adjustState = new fltk::Choice(195, 185, 60, 25, "state");
                o->begin();
                new fltk::Item("Left");
                new fltk::Item("Right");
                new fltk::Item("Rest");
                new fltk::Item("All");
                o->end();
              }
               {fltk::CheckButton* o = ui_motorReply = new fltk::CheckButton(65, 55, 15, 15, "reply");
                o->set_vertical();
                o->align(fltk::ALIGN_LEFT);
                o->tooltip("this will return the motor position and sensor data every time a new posture \
is sent to the queue. to get a constant feed enable \"stream\"");
              }
               {fltk::CheckButton* o = ui_realtime = new fltk::CheckButton(150, 55, 15, 15, "Realtime");
                o->set_vertical();
                o->callback((fltk::Callback*)cb_ui_realtime);
                o->align(fltk::ALIGN_LEFT);
                o->tooltip("will send postures to robot if sendPosture() is called");
              }
               {fltk::CheckButton* o = ui_stream = new fltk::CheckButton(225, 54, 15, 17, "stream");
                o->set_vertical();
                o->callback((fltk::Callback*)cb_ui_stream);
                o->align(fltk::ALIGN_LEFT);
                o->tooltip("will continuously send postures to robot.");
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 305, 505, "Scn");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::Browser* o = ui_objectList = new fltk::Browser(30, 70, 205, 165, "scene objects");
                o->callback((fltk::Callback*)cb_ui_objectList);
              }
               {fltk::Choice* o = ui_objects = new fltk::Choice(30, 30, 201, 25, "objects");
                o->align(fltk::ALIGN_TOP);
              }
               {fltk::Button* o = new fltk::Button(34, 245, 85, 30, "add object");
                o->callback((fltk::Callback*)cb_add1);
              }
               {fltk::Button* o = new fltk::Button(139, 245, 85, 30, "delete object");
                o->callback((fltk::Callback*)cb_delete);
              }
               {fltk::ValueSlider* o = ui_objX = new fltk::ValueSlider(55, 285, 150, 25, "tX");
                o->minimum(-121);
                o->maximum(121);
                o->step(0.5);
                o->callback((fltk::Callback*)cb_ui_objX);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_objY = new fltk::ValueSlider(55, 310, 150, 25, "tY");
                o->minimum(-121);
                o->maximum(121);
                o->step(0.5);
                o->callback((fltk::Callback*)cb_ui_objY);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_objZ = new fltk::ValueSlider(55, 335, 150, 25, "tZ");
                o->minimum(-121);
                o->maximum(121);
                o->step(0.5);
                o->callback((fltk::Callback*)cb_ui_objZ);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_objrX = new fltk::ValueSlider(55, 370, 150, 25, "rX");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_objrX);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_objrY = new fltk::ValueSlider(55, 395, 150, 25, "rY");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_objrY);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_objrZ = new fltk::ValueSlider(55, 420, 150, 25, "rZ");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_objrZ);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_showScene = new fltk::CheckButton(45, 470, 25, 25, "show scene");
                o->callback((fltk::Callback*)cb_ui_showScene);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 305, 510, "Jnt");
              o->set_vertical();
              o->labelfont(fltk::HELVETICA_BOLD);
              o->labelsize(11);
              o->textsize(11);
              o->hide();
              o->begin();
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(0, 8, 295, 502);
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd1e6f000);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(3, 140, 288, 301);
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(3, 63, 288, 75);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
              }
               {fltk::ValueSlider* o = ui_Ang[0] = new fltk::ValueSlider(56, 315, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(30);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang);
              }
               {fltk::ValueSlider* o = ui_Ang[1] = new fltk::ValueSlider(56, 335, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-30);
                o->maximum(20);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang1);
              }
               {fltk::ValueSlider* o = ui_Ang[2] = new fltk::ValueSlider(56, 355, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-70);
                o->maximum(70);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang2);
              }
               {fltk::ValueSlider* o = ui_Ang[3] = new fltk::ValueSlider(56, 375, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang3);
              }
               {fltk::ValueSlider* o = ui_Ang[4] = new fltk::ValueSlider(56, 395, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-60);
                o->maximum(60);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang4);
              }
               {fltk::ValueSlider* o = ui_Ang[5] = new fltk::ValueSlider(56, 415, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-22);
                o->maximum(22);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang5);
              }
               {fltk::ValueSlider* o = ui_Ang[6] = new fltk::ValueSlider(57, 160, 110, 20, "ui_Rarm");
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(130);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang6);
              }
               {fltk::ValueSlider* o = ui_Ang[7] = new fltk::ValueSlider(57, 180, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(0);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang7);
              }
               {fltk::ValueSlider* o = ui_Ang[8] = new fltk::ValueSlider(57, 200, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang8);
              }
               {fltk::ValueSlider* o = ui_Ang[9] = new fltk::ValueSlider(57, 220, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-110);
                o->maximum(0);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang9);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(3, 8, 288, 54);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xaaaaaa00);
              }
               {fltk::ValueSlider* o = ui_Ang[10] = new fltk::ValueSlider(171, 315, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-30);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Anga);
              }
               {fltk::ValueSlider* o = ui_Ang[11] = new fltk::ValueSlider(171, 335, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-20);
                o->maximum(30);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Angb);
              }
               {fltk::ValueSlider* o = ui_Ang[12] = new fltk::ValueSlider(171, 355, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-70);
                o->maximum(70);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Angc);
              }
               {fltk::ValueSlider* o = ui_Ang[13] = new fltk::ValueSlider(171, 375, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Angd);
              }
               {fltk::ValueSlider* o = ui_Ang[14] = new fltk::ValueSlider(171, 395, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-60);
                o->maximum(60);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ange);
              }
               {fltk::ValueSlider* o = ui_Ang[15] = new fltk::ValueSlider(171, 415, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-22);
                o->maximum(22);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Angf);
              }
               {fltk::ValueSlider* o = ui_Ang[16] = new fltk::ValueSlider(172, 159, 110, 20, "ui_Larm");
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(130);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang10);
              }
               {fltk::ValueSlider* o = ui_Ang[17] = new fltk::ValueSlider(172, 179, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang11);
              }
               {fltk::ValueSlider* o = ui_Ang[18] = new fltk::ValueSlider(172, 199, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(90);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang12);
              }
               {fltk::ValueSlider* o = ui_Ang[19] = new fltk::ValueSlider(172, 219, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-110);
                o->maximum(0);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang13);
              }
               {fltk::ValueSlider* o = ui_Ang[20] = new fltk::ValueSlider(96, 288, 135, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(-90);
                o->maximum(0);
                o->step(1);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang14);
              }
               {fltk::ValueSlider* o = ui_Ang[21] = new fltk::ValueSlider(95, 108, 135, 20, "Head T");
                o->minimum(15);
                o->maximum(120);
                o->step(1);
                o->value(60);
                o->callback((fltk::Callback*)cb_ui_Ang15);
                o->align(fltk::ALIGN_LEFT);
                /*neck*/
              }
               {fltk::ValueSlider* o = ui_Ang[22] = new fltk::ValueSlider(95, 88, 135, 20, "Head P");
                o->minimum(256);
                o->maximum(376);
                o->step(1);
                o->value(316);
                o->callback((fltk::Callback*)cb_ui_Ang16);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_Ang[23] = new fltk::ValueSlider(95, 68, 135, 20, "Head R");
                o->minimum(562);
                o->maximum(582);
                o->value(572);
                o->callback((fltk::Callback*)cb_ui_Ang17);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_Ang[24] = new fltk::ValueSlider(57, 260, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(512);
                o->maximum(632);
                o->step(1);
                o->value(572);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang18);
                /*will be Enc[24]*/
              }
               {fltk::ValueSlider* o = ui_Ang[25] = new fltk::ValueSlider(57, 240, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->maximum(120);
                o->step(1);
                o->value(60);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang19);
              }
               {fltk::ValueSlider* o = ui_Ang[26] = new fltk::ValueSlider(172, 259, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(768);
                o->maximum(888);
                o->step(1);
                o->value(828);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang1a);
                /*will be Enc[26]*/
              }
               {fltk::ValueSlider* o = ui_Ang[27] = new fltk::ValueSlider(172, 239, 110, 20);
                o->buttoncolor((fltk::Color)0x2200f000);
                o->minimum(256);
                o->maximum(376);
                o->step(1);
                o->value(316);
                o->slider_size(6);
                o->callback((fltk::Callback*)cb_ui_Ang1b);
              }
               {fltk::Button* o = new fltk::Button(5, 442, 45, 28, "Zero");
                o->callback((fltk::Callback*)cb_Zero);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 315, 45, 20, "hipT");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 335, 45, 20, "hipR");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 355, 45, 20, "hipP");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 375, 45, 20, "knee");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 395, 45, 20, "ankleP");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 415, 45, 20, "ankleR");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 160, 45, 20, "shldrP");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 180, 45, 20, "shldrR");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 200, 45, 20, "shldrT");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 220, 45, 20, "elbow");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 240, 45, 20, "hand");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(10, 260, 45, 20, "fingers");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(100, 140, 45, 20, "Right");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(220, 140, 45, 20, "Left");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::InvisibleBox* o = new fltk::InvisibleBox(39, 281, 45, 20, "waist");
                o->align(fltk::ALIGN_INSIDE);
              }
               {fltk::ValueInput* o = ui_intstep = new fltk::ValueInput(210, 445, 26, 25, "Steps");
                o->minimum(1);
                o->maximum(10);
                o->step(1);
                o->value(5);
                o->callback((fltk::Callback*)cb_ui_intstep);
                o->align(fltk::ALIGN_RIGHT);
              }
               {fltk::Button* o = new fltk::Button(50, 442, 45, 28, "send");
                o->callback((fltk::Callback*)cb_send2);
              }
               {fltk::LightButton* o = ui_E[5] = new fltk::LightButton(164, 13, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E);
              }
               {fltk::LightButton* o = ui_E[8] = new fltk::LightButton(140, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E1);
              }
               {fltk::LightButton* o = ui_E[7] = new fltk::LightButton(189, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E2);
              }
               {fltk::LightButton* o = ui_E[6] = new fltk::LightButton(164, 43, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E3);
              }
               {fltk::LightButton* o = ui_E[0] = new fltk::LightButton(77, 13, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E4);
                /*RU*/
              }
               {fltk::LightButton* o = ui_E[3] = new fltk::LightButton(55, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E5);
              }
               {fltk::LightButton* o = ui_E[2] = new fltk::LightButton(102, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E6);
              }
               {fltk::LightButton* o = ui_E[1] = new fltk::LightButton(77, 43, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_E7);
              }
               {fltk::LightButton* o = ui_E[9] = new fltk::LightButton(164, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->callback((fltk::Callback*)cb_ui_E8);
              }
               {fltk::LightButton* o = ui_E[4] = new fltk::LightButton(77, 28, 25, 15);
                o->buttoncolor((fltk::Color)56);
                o->callback((fltk::Callback*)cb_ui_E9);
              }
               {fltk::Button* o = new fltk::Button(95, 442, 45, 28, "create IK");
                o->callback((fltk::Callback*)cb_create1);
                o->align(fltk::ALIGN_WRAP);
              }
               {fltk::Button* o = new fltk::Button(140, 442, 45, 28, "reset  IK");
                o->callback((fltk::Callback*)cb_reset4);
                o->align(fltk::ALIGN_WRAP);
              }
               {fltk::Button* o = new fltk::Button(5, 472, 45, 28, "land");
                o->callback((fltk::Callback*)cb_land);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(0, 25, 310, 530, "Tsk");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::ValueSlider* o = ui_wipeRadius = new fltk::ValueSlider(120, 25, 115, 25, "Radius");
                o->minimum(0.1);
                o->maximum(10);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_wipeRadius);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::Button* o = new fltk::Button(120, 85, 115, 25, "wipe");
                o->callback((fltk::Callback*)cb_wipe);
              }
               {fltk::Button* o = new fltk::Button(120, 55, 115, 25, "make wipe");
                o->callback((fltk::Callback*)cb_make1);
              }
              o->end();
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
      fltk::Group::current()->resizable(o);
    }
    o->end();
  }
   {fltk::Window* o = ui_graph_window = new fltk::Window(1065, 580, "Graph Window");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {AppGraphViewer* o = ui_graph_win = new AppGraphViewer(194, 6, 871, 539, "graph");
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0x7eabf000);
    }
     {fltk::Group* o = new fltk::Group(0, 0, 184, 540);
      o->set_vertical();
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xd3d7f000);
      o->begin();
       {fltk::MultiBrowser* o = ui_channelList = new fltk::MultiBrowser(15, 20, 150, 220, "channels");
        o->type(fltk::MultiBrowser::MULTI);
        o->set_vertical();
        o->callback((fltk::Callback*)cb_ui_channelList);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(25, 401, 55, 90, "Rotate");
        o->set_vertical();
        o->box(fltk::DOWN_BOX);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
      }
       {fltk::InvisibleBox* o = new fltk::InvisibleBox(85, 401, 55, 90, "Position");
        o->set_vertical();
        o->box(fltk::DOWN_BOX);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
      }
       {fltk::Button* o = new fltk::Button(10, 255, 50, 25, "load channels");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_load2);
        o->align(fltk::ALIGN_WRAP);
      }
       {fltk::CheckButton* o = ui_channelRX = new fltk::CheckButton(40, 421, 25, 25, "X");
        o->callback((fltk::Callback*)cb_ui_channelRX);
      }
       {fltk::CheckButton* o = ui_channelRY = new fltk::CheckButton(40, 441, 25, 25, "Y");
        o->callback((fltk::Callback*)cb_ui_channelRY);
      }
       {fltk::CheckButton* o = ui_channelRZ = new fltk::CheckButton(40, 461, 25, 25, "Z");
        o->callback((fltk::Callback*)cb_ui_channelRZ);
      }
       {fltk::CheckButton* o = ui_channelPX = new fltk::CheckButton(110, 421, 25, 25, "X");
        o->callback((fltk::Callback*)cb_ui_channelPX);
      }
       {fltk::CheckButton* o = ui_channelPY = new fltk::CheckButton(110, 441, 25, 25, "Y");
        o->callback((fltk::Callback*)cb_ui_channelPY);
      }
       {fltk::CheckButton* o = ui_channelPZ = new fltk::CheckButton(110, 461, 25, 25, "Z");
        o->callback((fltk::Callback*)cb_ui_channelPZ);
      }
       {fltk::CheckButton* o = ui_ikChannel = new fltk::CheckButton(35, 376, 25, 25, "ik channels");
        o->set_flag(fltk::STATE);
      }
       {fltk::Button* o = new fltk::Button(15, 501, 105, 25, "free tangent");
        o->callback((fltk::Callback*)cb_free);
      }
       {fltk::Button* o = new fltk::Button(65, 255, 50, 25, "make Group");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_make2);
        o->align(fltk::ALIGN_WRAP);
      }
       {fltk::Button* o = new fltk::Button(120, 255, 50, 25, "new   track");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_new);
        o->align(fltk::ALIGN_WRAP);
      }
       {fltk::Choice* o = ui_keyGroups = new fltk::Choice(30, 300, 125, 25, "Key Groups");
        o->callback((fltk::Callback*)cb_ui_keyGroups);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::Choice* o = ui_TrackList = new fltk::Choice(30, 340, 125, 25, "Tracks");
        o->callback((fltk::Callback*)cb_ui_TrackList);
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
    ui_currentTrack = new fltk::TextDisplay(295, 550, 140, 25, "Current Track");
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_nla_window = new fltk::Window(1008, 317, "NLA Editor");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {AppNLAEditor* o = ui_nla_win = new AppNLAEditor(176, 11, 822, 299, "Trax");
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xb9f0f000);
    }
     {fltk::Group* o = new fltk::Group(5, 10, 165, 300);
      o->set_vertical();
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xd3d3d300);
      o->begin();
       {fltk::MultiBrowser* o = ui_TrackListNla = new fltk::MultiBrowser(7, 20, 150, 220, "Tracks");
        o->type(fltk::MultiBrowser::MULTI);
        o->set_vertical();
        o->callback((fltk::Callback*)cb_ui_TrackListNla);
      }
       {fltk::Button* o = new fltk::Button(15, 255, 56, 25, "insert track");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_insert);
        o->align(fltk::ALIGN_WRAP);
      }
       {fltk::Button* o = new fltk::Button(85, 255, 56, 25, "load tracks");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_load3);
        o->align(fltk::ALIGN_WRAP);
      }
      o->end();
    }
    o->end();
  }
   {fltk::Window* o = ui_foot_window = new fltk::Window(682, 513, "Foot Planner");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {AppFootViewer* o = ui_foot_win = new AppFootViewer(170, 1, 512, 512, "Foot");
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xb9f0f000);
    }
     {fltk::Group* o = new fltk::Group(4, 17, 161, 478);
      o->set_vertical();
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xd3d3d300);
      o->begin();
       {fltk::Button* o = new fltk::Button(31, 218, 80, 25, "Foot");
        o->labelsize(10);
        o->callback((fltk::Callback*)cb_Foot);
        o->align(fltk::ALIGN_WRAP);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_timeline_window = new fltk::Window(927, 105, "TimeLine");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(0, 0, 925, 100);
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xc9f0c300);
      o->begin();
       {TimeSlider* o = time_slider = new TimeSlider(110, 30, 720, 38, "TimeLine");
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0x5a60f000);
      }
       {fltk::ValueInput* o = ui_startFrame = new fltk::ValueInput(841, 49, 40, 20, "START");
        o->callback((fltk::Callback*)cb_ui_startFrame);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::ValueInput* o = ui_endFrame = new fltk::ValueInput(881, 49, 40, 20, "END");
        o->value(300);
        o->callback((fltk::Callback*)cb_ui_endFrame);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::Button* o = new fltk::Button(20, 39, 35, 30, "Play");
        o->callback((fltk::Callback*)cb_Play);
      }
       {fltk::ValueInput* o = ui_curFrame = new fltk::ValueInput(62, 48, 40, 20, "TIME");
        o->callback((fltk::Callback*)cb_ui_curFrame);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::Button* o = new fltk::Button(20, 74, 60, 20, "key at");
        o->callback((fltk::Callback*)cb_key);
      }
       {fltk::Button* o = new fltk::Button(86, 74, 60, 20, "key Jnts");
        o->callback((fltk::Callback*)cb_key1);
      }
       {fltk::Button* o = new fltk::Button(152, 74, 60, 20, "delete");
        o->callback((fltk::Callback*)cb_delete1);
      }
       {fltk::Button* o = new fltk::Button(218, 74, 60, 20, "move");
        o->callback((fltk::Callback*)cb_move);
      }
       {fltk::Button* o = new fltk::Button(284, 74, 60, 20, "key IK");
        o->callback((fltk::Callback*)cb_key2);
      }
       {fltk::CheckButton* o = ui_playIK = new fltk::CheckButton(80, 9, 20, 16, "play IK");
        o->set_flag(fltk::STATE);
      }
      new fltk::Button(349, 74, 60, 20, "clear Keys");
       {fltk::Group* o = new fltk::Group(40, 5, 290, 25);
        o->begin();
         {fltk::RadioButton* o = ui_frameTog = new fltk::RadioButton(170, 0, 30, 25, "frames");
          o->set_flag(fltk::STATE);
          o->callback((fltk::Callback*)cb_ui_frameTog);
          o->align(fltk::ALIGN_LEFT);
        }
         {fltk::RadioButton* o = new fltk::RadioButton(260, 0, 30, 25, "seconds");
          o->callback((fltk::Callback*)cb_seconds);
          o->align(fltk::ALIGN_LEFT);
        }
         {fltk::ValueInput* o = ui_timefps = new fltk::ValueInput(5, 0, 30, 25, "fps");
          o->value(30);
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}
